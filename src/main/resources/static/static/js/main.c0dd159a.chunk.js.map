{"version":3,"sources":["node-module/node-atomic/Segment.tsx","node-module/node-atomic/LinkTemporary.tsx","node-module/node-atomic/Port.tsx","node-module/node-atomic/segments/PlaceholderSegment.tsx","node-module/node-atomic/NodeModel.ts","node-module/node-atomic/Node.tsx","image-manipulation/structs/ImageLikeData.ts","node-module/node-atomic/Link.tsx","node-module/NodeCanvas.tsx","node-module/RenderWindow.tsx","components/Button.tsx","components/UnfoldingButton.tsx","image-manipulation/WorkerLoader.ts","image-manipulation/workers/CapBrightnessWorker.ts","node-module/node-atomic/segments/OutputSegment.tsx","node-module/node-atomic/segments/InputSegment.tsx","node-module/node-atomic/segments/OptionSegment.tsx","node-module/nodes/utils/NodeSave.ts","node-module/node-atomic/segments/NumericSliderSegment.tsx","node-module/nodes/CapBrightnessNode.tsx","image-manipulation/workers/ContrastWorker.ts","node-module/nodes/ContrastNode.ts","node-module/nodes/OutputNode.ts","node-module/nodes/utils/FileToLoad.ts","node-module/node-atomic/segments/ImageSegment.tsx","node-module/nodes/ImageInputNode.ts","node-module/nodes/utils/NodeFactory.ts","node-module/NodeControlPanel.tsx","node-module/NodeStorage.ts","node-module/NodeCanvasViewProperties.ts","node-module/NodeModule.tsx","components/Navbar.tsx","examples/Example.tsx","pages/ExamplesPage.tsx","pages/MainPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PortType","LinkTemporary","outputX","this","props","x1","outputY","y1","inputX","x2","inputY","y2","style","position","top","left","overflow","width","height","zIndex","d","onClick","event","console","log","stroke","strokeWidth","fill","Component","Port","handleClick","preventDefault","parent","portType","INPUT","handleInputClick","OUTPUT","handleOutputClick","dim","parentDimensions","topPosition","segmentHeight","setState","hasTempLink","startX","clientX","startY","clientY","handleTempLinkMove","state","currentScale","scale","window","addEventListener","handleTempLink","removeEventListener","storage","handleAttemptToAddLink","x","y","handleRemoveLinks","handleTouch","handleOutputTouch","touches","screenX","screenY","segmentStyle","size","percentageOffsetTop","marginTop","marginLeft","borderRadius","onMouseDown","onTouchStart","className","createStyle","Segment","nodeStyle","segment","index","headHeight","pointerEvents","textAlign","percentageOffsetLeft","padding","display","justifyContent","alignItems","fontFamily","fontWeight","labelsFontWeight","fontSize","fontSizeToSegmentHeight","color","textColor","userSelect","paddingLeft","whiteSpace","NO_PORT","SegmentModel","label","value","spacesOccupied","_parent","_index","_parentDimensions","_value","_portType","_label","_spacesOccupied","dimensions","Error","PlaceholderSegment","PlaceholderSegmentModel","SegmentStyle","NodeDimension","stopperHeight","_width","_headHeight","_segmentHeight","_footerHeight","nodeDim","footerHeight","NodeViewProperties","_selected","_rolledUp","_aboutToDelete","_nodeStyle","defaultNodeStyle","_dimensions","_x","_y","NodeModel","id","name","valueFunction","segments","_valueFunction","_viewProperties","_segments","_links","forEach","s","addSegment","isInitialized","initialize","length","push","i","temp","link","links","filter","e","equals","undefined","outputIndex","getNodeValue","segmentIndex","segmentLinks","l","outputSegment","inputSegment","viewProps","allowHeaderColorOverwriting","allowPortColorOverwriting","nodeBackgroundColor","headerColor","borderColor","segmentColor","inputPortColor","outputPortColor","headerFontWeight","NodeComponentState","selected","ChanelType","ColorSpace","Node","_nodeBackgroundRef","React","createRef","lastTouchTime","handleDeleteNodeOnKeyPress","code","handleRemoveNode","node","unselect","handleUpdateNode","mouseX","mouseY","moveNode","canvasViewProps","cleanUp","shiftPressed","PressedKeys","keys","includes","current","nodeBox","getBoundingClientRect","now","Date","viewProperties","aboutToDelete","touchUnselect","touch","map","createView","ref","backgroundColor","boxShadow","draggable","PureComponent","Link","calcPortLeftOffsetToCenter","calcPortTopOffsetToCenter","createSVGStyle","LinkModel","_outputSegment","_inputSegment","NodeCanvasState","nodes","NodeCanvas","storageListener","listenerId","canvasRef","handleMove","time","transform","shiftLeft","shiftTop","handleScroll","offset","deltaMode","deltaY","newScale","handleKeyDown","handleKeyUp","k","stopPropagation","disableScroll","passive","enableScroll","handleTouchMove","handleTouchScale","onTouchMove","endTouch","originalDistance","Math","sqrt","pow","originalScale","newDistance","onTouchEnd","getNodes","getLinks","mainDivBox","addUpdateListener","removeUpdateListener","key","onMouseEnter","onMouseLeave","onKeyDown","onKeyUp","onWheel","margin","unselectable","transition","n","onTouchCancel","RenderWindow","paintCanvas","imageData","document","createElement","getContext","putImageData","canvas","maxW","closest","clientWidth","maxH","clientHeight","drawImage","lastUpdate","prevProps","prevState","snapshot","outputNode","paintOutput","then","reason","ButtonContent","Button","handleMouseEnter","hover","body","cursor","handleMouseLeave","marginBottom","paddingRight","mainColors","UnfoldingButton","div","paddingTop","maxHeight","minWidth","calcDivWith","listStyle","borderBottomLeftRadius","borderBottomRightRadius","subButtonsContent","sc","content","clickEvent","ListItem","borderTop","WebWorkerCreator","worker","toString","blob","Blob","Worker","URL","createObjectURL","CapBrightnessWorker","self","message","j","j3","pxValue","multiplayer","newValue","capValue","data","capAtMax","capMax","imgArray","max","floor","postMessage","buffer","CapBrightnessParams","CapBrightnessImageWorker","parameters","params","WorkerLoader","_isBusy","inputData","Promise","reject","resolve","onmessage","onmessageerror","onerror","OutputSegment","createOutputLabelStyle","createPort","OutputSegmentModel","InputSegment","createInputLabelStyle","InputSegmentModel","OptionSegment","cancel","cancelSelection","handleChange","selectedOption","options","offsetTop","offsetLeft","border","borderTopLeftRadius","borderTopRightRadius","createSelectStyle","font","onScroll","boxSizing","op","clickListener","asLabel","OptionSegmentModel","ImageLikeData","colorSpace","channels","_numberOfChannels","_channels","_data","_height","_colorSpace","sum","ch","RGB","NodeSave","nodeModel","nodeDefaultDim","rolledUp","nodeDimensions","fileToLoadList","NumericSliderState","fillPercentage","focused","NumericSliderSegment","calculateFill","minValue","maxValue","handleMouseDown","box","target","x0","right","newFill","precision","handleUnfocused","handleMouseUp","handleTouchDown","split","handleTouchEnd","Number","parseFloat","let","onChange","type","createInputStyle","defaultValue","createSliderStyle","createInnerSliderStyle","NumericSliderSegmentModel","decimalPlaces","CapBrightnessNodeSave","capAt","CapBrightnessNFF","nodeName","defaultDimensions","ClampImageNodeVFun","save","imageWorker","a","imgSource","getSegmentLinks","sourcePromise","cap","setParams","run","ContrastWorker","contrast","contrastFactor","ContrastImageWorker","createMessage","hasAlpha","numberOfChannels","ContrastNodeSave","ContrastNFF","ContrastNodeVFun","imageSrc","inputImg","OutputNFF","clone","OutputNodeVFun","inputLink","ImageData","image","FileToLoad","fileName","fileSize","file","ImageSegmentState","imgSrc","ImageSegment","loadFile","reader","FileReader","onload","img","Image","src","ctx","getImageData","result","readAsDataURL","handleValueChange","files","ImageSegmentModel","fileToLoad","accept","createLabelStyle","maxWidth","marginRight","_fileToLoad","CreateImageInputNode","ImageInputNodeVFun","ImageInputNodeSave","imageSegment","ImageInputNFF","Uint8ClampedArray","NodeFactory","nodeFactoryFun","NodeFactoryFunctionMap","get","Map","nFFs","nFF","set","addNFF","NodeControlPanel","buttonsContent","createAddNodeEvent","nodeCreateFunction","newNode","createNewNode","getNextNodeId","panelBox","nodeX","nodeY","handleAddNode","createButtonProps","buttonPropsList","nodeFF","borderLeft","createBreakElement","unfocusedOnClick","DefaultNodeStorage","listeners","nextNodeId","biggestNodeId","addLink","listener","newLinkList","concat","callListeners","newNodeList","nodeIdExist","targetX","targetY","portSize","xMin","xMax","yMin","newLink","removeLink","nodeId","removeLinks","updatedNode","nodeIndex","linksToRemove","tempLink","NodeCanvasViewProperties","NodeModule","nodeCanvasViewProps","handleResizeMouseDown","parentBox","parentElement","handleMouseMove","newPosition","dividerPosition","handleResizeTouchStart","disableControlPanel","toggleFullScreen","toggleOn","fullscreenElement","exitFullscreen","requestFullscreen","NavbarLink","as","RouterLink","to","Navbar","borderBottom","bg","_hover","Example","h","justify","align","direction","description","w","nodeModels","linkModels","ExamplesPage","useRouteMatch","path","url","test","testSave","createNodeSave","JSON","stringify","testLoaded","loadNode","exact","MainPage","testNodes","CreateOutputNode","CreateClampImageNode","CreateContrastNode","theme","extendTheme","styles","global","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c0dd159a.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport Port from \"./Port\";\r\nimport {NodeStorage} from \"../NodeStorage\";\r\nimport {NodeCanvasViewProperties} from \"../NodeCanvasViewProperties\";\r\nimport {NodeDimension, NodeModel, NodeStyle, SegmentStyle} from \"./NodeModel\";\r\n\r\nexport enum PortType {\r\n    INPUT,\r\n    OUTPUT,\r\n    NO_PORT\r\n}\r\n\r\nexport class SegmentProps<T> {\r\n    public segment: SegmentModel<T>;\r\n    public storage: NodeStorage;\r\n    public currentScale: NodeCanvasViewProperties;\r\n\r\n    constructor(segment: SegmentModel<T>, storage: NodeStorage, currentScale: NodeCanvasViewProperties) {\r\n        this.segment = segment;\r\n        this.storage = storage;\r\n        this.currentScale = currentScale;\r\n    }\r\n}\r\n\r\nexport abstract class Segment<Type, Props extends SegmentProps<Type>, State> extends Component<Props, State> {\r\n    protected topPosition: number;\r\n    protected nodeStyle: NodeStyle;\r\n    protected segmentStyle: SegmentStyle;\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.topPosition = this.props.segment.index * this.props.segment.parentDimensions.segmentHeight + this.props.segment.parentDimensions.headHeight;\r\n        this.nodeStyle = props.segment.parent.style;\r\n        this.segmentStyle = this.nodeStyle.segmentStyle;\r\n    }\r\n\r\n    protected createOutputLabelStyle(): React.CSSProperties {\r\n        let dim = this.props.segment.parentDimensions;\r\n        return {\r\n            position: \"absolute\",\r\n            pointerEvents: \"none\",\r\n            textAlign: \"right\",\r\n            top: this.topPosition,\r\n            marginTop: dim.segmentHeight * this.segmentStyle.percentageOffsetTop,\r\n            height: dim.segmentHeight - 2 * this.segmentStyle.percentageOffsetTop * dim.segmentHeight,\r\n            width: dim.width * (1 - 2 * this.segmentStyle.percentageOffsetLeft) - 6,\r\n            left: \"-3px\",\r\n            marginLeft: dim.width * this.segmentStyle.percentageOffsetLeft,\r\n            padding: 0,\r\n\r\n            display: \"flex\",\r\n            justifyContent: \"flex-end\",\r\n            alignItems: \"center\",\r\n\r\n            fontFamily: this.nodeStyle.fontFamily,\r\n            fontWeight: this.nodeStyle.labelsFontWeight,\r\n            fontSize: dim.segmentHeight * this.segmentStyle.fontSizeToSegmentHeight,\r\n            color: this.nodeStyle.textColor,\r\n            userSelect: \"none\"\r\n\r\n        } as React.CSSProperties\r\n    }\r\n\r\n    protected createInputLabelStyle(): React.CSSProperties {\r\n        let dim = this.props.segment.parentDimensions;\r\n        return {\r\n            position: \"absolute\",\r\n            pointerEvents: \"none\",\r\n            textAlign: \"left\",\r\n            top: this.topPosition,\r\n            marginTop: dim.segmentHeight * this.segmentStyle.percentageOffsetTop,\r\n            height: dim.segmentHeight - 2 * this.segmentStyle.percentageOffsetTop * dim.segmentHeight,\r\n            width: dim.width * (1 - 1.25 * this.segmentStyle.percentageOffsetLeft) - 6,\r\n            left: \"6px\",\r\n            marginLeft: dim.width * this.segmentStyle.percentageOffsetLeft,\r\n            padding: 0,\r\n\r\n            display: \"flex\",\r\n            justifyContent: \"flex-start\",\r\n            alignItems: \"center\",\r\n            overflow: \"hidden\",\r\n\r\n            fontFamily: this.nodeStyle.fontFamily,\r\n            fontWeight: this.nodeStyle.labelsFontWeight,\r\n            fontSize: dim.segmentHeight * this.segmentStyle.fontSizeToSegmentHeight,\r\n            color: this.nodeStyle.textColor,\r\n            userSelect: \"none\"\r\n\r\n        } as React.CSSProperties\r\n    }\r\n\r\n    protected createLabelStyle() {\r\n        let dim = this.props.segment.parentDimensions;\r\n        return {\r\n            position: \"absolute\",\r\n            padding: 0,\r\n            paddingLeft: \"6px\",\r\n            top: this.topPosition,\r\n            marginTop: dim.segmentHeight * this.segmentStyle.percentageOffsetTop,\r\n            height: dim.segmentHeight * (1 - 2 * this.segmentStyle.percentageOffsetTop),\r\n            width: dim.width * (1 - 2 * this.segmentStyle.percentageOffsetLeft) - 6,\r\n            marginLeft: dim.width * this.segmentStyle.percentageOffsetLeft,\r\n\r\n            overflow: \"hidden\",\r\n            display: \"flex\",\r\n            justifyContent: \"flex-start\",\r\n            alignItems: \"flex-start\",\r\n\r\n            fontFamily: this.nodeStyle.fontFamily,\r\n            fontWeight: this.nodeStyle.labelsFontWeight,\r\n            color: this.nodeStyle.textColor,\r\n            userSelect: \"none\",\r\n            pointerEvents: \"none\",\r\n            fontSize: dim.segmentHeight * this.segmentStyle.fontSizeToSegmentHeight,\r\n            whiteSpace: \"nowrap\"\r\n        } as React.CSSProperties\r\n    }\r\n\r\n    protected createPort(): JSX.Element {\r\n        return this.props.segment.portType !== PortType.NO_PORT ? (\r\n                <Port parent={this.props.segment} topPosition={this.topPosition}\r\n                      storage={this.props.storage} currentScale={this.props.currentScale}/>)\r\n            : <div/>;\r\n    }\r\n\r\n    get width(): number {\r\n        return this.props.segment.parentDimensions.width * (1 - 2 * this.segmentStyle.percentageOffsetLeft);\r\n    }\r\n\r\n    get height(): number {\r\n        return this.props.segment.parentDimensions.segmentHeight * (1 - 2 * this.segmentStyle.percentageOffsetTop);\r\n    }\r\n\r\n    get offsetLeft(): number {\r\n        return this.props.segment.parentDimensions.width * this.segmentStyle.percentageOffsetLeft;\r\n    }\r\n\r\n    get offsetTop(): number {\r\n        return this.props.segment.parentDimensions.segmentHeight * this.segmentStyle.percentageOffsetTop;\r\n    }\r\n}\r\n\r\nexport abstract class SegmentModel<Type> {\r\n    protected _parent: NodeModel | null = null;\r\n    protected _index: number | null = null;\r\n    protected _parentDimensions: NodeDimension | null = null;\r\n    protected _value: Type;\r\n    protected _portType: PortType;\r\n    protected _label: string;\r\n    protected readonly _spacesOccupied: number;\r\n\r\n    protected constructor(label: string, value: Type, portType: PortType, spacesOccupied?: number) {\r\n        this._value = value;\r\n        this._portType = portType;\r\n        this._label = label;\r\n        this._spacesOccupied = spacesOccupied ? spacesOccupied : 1;\r\n    }\r\n\r\n    abstract createView(storage: NodeStorage, currentScale: NodeCanvasViewProperties): JSX.Element;\r\n\r\n    initialize(parent: NodeModel, index: number, dimensions: NodeDimension) {\r\n        this.parent = parent;\r\n        this._index = index;\r\n        this._parentDimensions = dimensions;\r\n    }\r\n\r\n    calcPortTopOffsetToCenter(): number {\r\n        if (this._parentDimensions == null || this._index == null || this._parent == null) {\r\n            throw new Error();\r\n        }\r\n        let dim = this._parentDimensions;\r\n        return this._parent.y + dim.headHeight + dim.segmentHeight * (this._index + 0.5);\r\n    }\r\n\r\n    calcPortLeftOffsetToCenter(): number {\r\n        if (this._parentDimensions == null || this._index == null || this._parent == null) {\r\n            throw new Error();\r\n        }\r\n        switch (this.portType) {\r\n            case PortType.INPUT:\r\n                return this._parent.x;\r\n            case PortType.OUTPUT:\r\n                return this._parent.x + this._parentDimensions.width;\r\n            case PortType.NO_PORT:\r\n                return this._parent.x;\r\n        }\r\n    }\r\n\r\n    get isInitialized(): boolean {\r\n        return !(this._parent == null || this._index == null || this._parentDimensions == null);\r\n    }\r\n\r\n    get parent(): NodeModel {\r\n        if (this._parent == null) {\r\n            throw new Error(\"Segment is not initialized by node\");\r\n        } else {\r\n            return this._parent;\r\n        }\r\n    }\r\n\r\n    set parent(value: NodeModel) {\r\n        this._parent = value;\r\n    }\r\n\r\n    get value(): Type {\r\n        return this._value;\r\n    }\r\n\r\n    set value(value: Type) {\r\n        this._value = value;\r\n    }\r\n\r\n    get index(): number {\r\n        if (this._index == null) {\r\n            throw new Error(\"Segment is not initialized by node\");\r\n        } else {\r\n            return this._index;\r\n        }\r\n    }\r\n\r\n    get portType(): PortType {\r\n        return this._portType;\r\n    }\r\n\r\n    get parentDimensions(): NodeDimension {\r\n        if (this._parentDimensions == null) {\r\n            throw new Error(\"Segment is not initialized by node\");\r\n        } else {\r\n            return this._parentDimensions;\r\n        }\r\n    }\r\n\r\n    get label(): string {\r\n        return this._label;\r\n    }\r\n\r\n    get spacesOccupied(): number {\r\n        return this._spacesOccupied;\r\n    }\r\n}\r\n\r\nexport default Segment;","import React, {Component} from 'react';\r\n\r\nclass LinkTemporary extends Component<{ x1: number, y1: number, x2: number, y2: number }> {\r\n\r\n    render() {\r\n        let outputX = this.props.x1;\r\n        let outputY = this.props.y1;\r\n        let inputX = this.props.x2;\r\n        let inputY = this.props.y2;\r\n        return (\r\n            <div>\r\n                <svg\r\n                    style={{\r\n                        position: \"absolute\", top: 0, left: 0, overflow: \"visible\"\r\n                        , width: \"100px\", height: \"100px\", zIndex: -10\r\n                    }}>\r\n                    <path d={`M ${outputX}\r\n                                ${outputY}\r\n                                \r\n                                C ${(outputX + inputX) / 2} ${outputY} \r\n                                ${(outputX + inputX) / 2} ${inputY} \r\n                                \r\n                                ${inputX} ${inputY}`}\r\n                          onClick={event => console.log(\"line cliked\")}\r\n                          stroke=\"#334447\" strokeWidth=\"6px\" fill=\"transparent\"/>\r\n                </svg>\r\n                <svg\r\n                    style={{\r\n                        position: \"absolute\", top: 0, left: 0, overflow: \"visible\"\r\n                        , width: \"100px\", height: \"100px\", zIndex: -10\r\n                    }}>\r\n                    <path d={`M ${outputX}\r\n                            ${outputY}\r\n                            \r\n                            C ${(outputX + inputX) / 2} ${outputY} \r\n                            ${(outputX + inputX) / 2} ${inputY} \r\n                            \r\n                            ${inputX} ${inputY}`}\r\n                          onClick={event => console.log(\"line cliked\")}\r\n                          stroke=\"#586673\" strokeWidth=\"4.5px\" fill=\"transparent\"/>\r\n                </svg>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LinkTemporary;","import React, {Component} from 'react';\r\nimport \"./Port.css\"\r\nimport {PortType, SegmentModel} from \"./Segment\";\r\nimport LinkTemporary from \"./LinkTemporary\";\r\nimport {NodeStorage} from \"../NodeStorage\";\r\nimport {NodeCanvasViewProperties} from \"../NodeCanvasViewProperties\";\r\n\r\nclass Props {\r\n    public parent: SegmentModel<any>;\r\n    public topPosition: number;\r\n    public storage: NodeStorage;\r\n    public currentScale: NodeCanvasViewProperties;\r\n\r\n    constructor(parent: SegmentModel<any>, topPosition: number, storage: NodeStorage, currentScale: NodeCanvasViewProperties) {\r\n        this.parent = parent;\r\n        this.topPosition = topPosition;\r\n        this.storage = storage;\r\n        this.currentScale = currentScale;\r\n    }\r\n}\r\n\r\nclass State {\r\n    public x1: number;\r\n    public y1: number;\r\n    public x2: number;\r\n    public y2: number;\r\n    public hasTempLink: boolean\r\n\r\n    constructor(hasTempLink: false, x1: number, y1: number, x2: number, y2: number) {\r\n        this.x1 = x1;\r\n        this.y1 = y1;\r\n        this.x2 = x2;\r\n        this.y2 = y2;\r\n        this.hasTempLink = hasTempLink;\r\n    }\r\n}\r\n\r\nclass Port extends Component<Props, State> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {hasTempLink: false, x1: 0, y1: 0, x2: 0, y2: 0};\r\n    }\r\n\r\n    handleClick = (event: any) => {\r\n        event.preventDefault();\r\n\r\n        if (this.props.parent.portType === PortType.INPUT) {\r\n            this.handleInputClick(event);\r\n        } else if (this.props.parent.portType === PortType.OUTPUT) {\r\n            this.handleOutputClick(event)\r\n        }\r\n    }\r\n\r\n    handleOutputClick = (event: any) => {\r\n        let dim = this.props.parent.parentDimensions;\r\n        let x1 = dim.width;\r\n        let y1 = this.props.topPosition + dim.segmentHeight * 0.5;\r\n        this.setState({\r\n            hasTempLink: true,\r\n            x1: x1, y1: y1, x2: x1, y2: y1\r\n        });\r\n        let startX = event.clientX;\r\n        let startY = event.clientY;\r\n\r\n        const handleTempLinkMove = (event: any) => {\r\n            this.setState({\r\n                x2: this.state.x1 + (event.clientX - startX) / this.props.currentScale.scale,\r\n                y2: this.state.y1 + (event.clientY - startY) / this.props.currentScale.scale\r\n            })\r\n        }\r\n\r\n        const handleTempLink = (event: any) => {\r\n            window.removeEventListener(\"mousemove\", handleTempLinkMove);\r\n            window.removeEventListener(\"mouseup\", handleTempLink);\r\n            this.setState({hasTempLink: false});\r\n            this.props.storage.handleAttemptToAddLink(this.props.parent,\r\n                this.props.parent.parent.x + this.state.x2,\r\n                this.props.parent.parent.y + this.state.y2);\r\n        }\r\n\r\n        window.addEventListener(\"mousemove\", handleTempLinkMove);\r\n        window.addEventListener(\"mouseup\", handleTempLink);\r\n    }\r\n\r\n    handleInputClick = (event: any) => {\r\n        this.props.storage.handleRemoveLinks(this.props.parent);\r\n    }\r\n\r\n    handleTouch = (event: any) => {\r\n        event.preventDefault();\r\n\r\n        if (this.props.parent.portType === PortType.INPUT) {\r\n            this.handleInputClick(event);\r\n        } else if (this.props.parent.portType === PortType.OUTPUT) {\r\n            this.handleOutputTouch(event)\r\n        }\r\n    }\r\n\r\n    handleOutputTouch = (event: any) => {\r\n        let dim = this.props.parent.parentDimensions;\r\n        let x1 = dim.width;\r\n        let y1 = this.props.topPosition + dim.segmentHeight * 0.5;\r\n        this.setState({\r\n            hasTempLink: true,\r\n            x1: x1, y1: y1, x2: x1, y2: y1\r\n        });\r\n        let startX = event.touches[0].screenX;\r\n        let startY = event.touches[0].screenY;\r\n\r\n        const handleTempLinkMove = (event: any) => {\r\n            this.setState({\r\n                x2: this.state.x1 + (event.touches[0].screenX - startX) / this.props.currentScale.scale,\r\n                y2: this.state.y1 + (event.touches[0].screenY - startY) / this.props.currentScale.scale\r\n            })\r\n        }\r\n\r\n        const handleTempLink = (event: any) => {\r\n            window.removeEventListener(\"touchmove\", handleTempLinkMove);\r\n            window.removeEventListener(\"touchend\", handleTempLink);\r\n            this.setState({hasTempLink: false});\r\n            this.props.storage.handleAttemptToAddLink(this.props.parent,\r\n                this.props.parent.parent.x + this.state.x2,\r\n                this.props.parent.parent.y + this.state.y2);\r\n        }\r\n\r\n        window.addEventListener(\"touchmove\", handleTempLinkMove);\r\n        window.addEventListener(\"touchend\", handleTempLink);\r\n    }\r\n\r\n    createStyle() {\r\n        let dim = this.props.parent.parentDimensions;\r\n        let style = this.props.parent.parent.style.segmentStyle;\r\n        let size = dim.segmentHeight - 2 * style.percentageOffsetTop * dim.segmentHeight;\r\n        return {\r\n            top: this.props.topPosition,\r\n            height: size,\r\n            width: size,\r\n            marginTop: dim.segmentHeight * style.percentageOffsetTop,\r\n            marginLeft: this.props.parent.portType === PortType.INPUT ?\r\n                -size / 2 : dim.width - size / 2,\r\n            borderRadius: dim.segmentHeight / 2,\r\n            //TODO add hover state and revrite css to jsx\r\n            // backgroundColor: nodeStyle.headerColor\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div onMouseDown={this.handleClick} onTouchStart={this.handleTouch}\r\n                     className={\"portView\"} style={this.createStyle()}>\r\n                </div>\r\n                {this.state.hasTempLink ?\r\n                    <LinkTemporary\r\n                        x1={this.state.x1} y1={this.state.y1}\r\n                        x2={this.state.x2} y2={this.state.y2}/>\r\n                    :\r\n                    null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Port;","import React from 'react';\r\nimport Segment, {PortType, SegmentModel, SegmentProps} from \"../Segment\";\r\nimport {NodeStorage} from \"../../NodeStorage\";\r\nimport {NodeCanvasViewProperties} from \"../../NodeCanvasViewProperties\";\r\n\r\nclass PlaceholderSegment extends Segment<null, SegmentProps<null>, any> {\r\n    render() {\r\n        return (\r\n            <div/>\r\n        );\r\n    }\r\n}\r\n\r\nexport class PlaceholderSegmentModel extends SegmentModel<null> {\r\n\r\n    constructor() {\r\n        super(\"\", null, PortType.NO_PORT);\r\n    }\r\n\r\n    createView(storage: NodeStorage, currentScale: NodeCanvasViewProperties): JSX.Element {\r\n        return <PlaceholderSegment key={this.index} storage={storage} currentScale={currentScale} segment={this}/>;\r\n    }\r\n\r\n}\r\n\r\nexport default PlaceholderSegment;","import {NodeValueFunction} from \"./NodeValueFunction\";\r\nimport {PortType, SegmentModel} from \"./Segment\";\r\nimport {LinkModel} from \"./Link\";\r\nimport {PlaceholderSegmentModel} from \"./segments/PlaceholderSegment\";\r\n\r\nexport class SegmentStyle {\r\n    public percentageOffsetTop: number = 0.15;\r\n    public percentageOffsetLeft: number = 0.08;\r\n    public fontSizeToSegmentHeight: number = 0.55;\r\n}\r\n\r\nexport class NodeStyle {\r\n    public allowHeaderColorOverwriting: boolean = false;\r\n    public allowPortColorOverwriting: boolean = false;\r\n    public nodeBackgroundColor: string = \"#54606d\";\r\n    public headerColor: string = \"#299b91\";\r\n    // public borderColor: string = \"#334447\";\r\n    public borderColor: string = \"#283537\";\r\n    public segmentColor: string = \"#3c454f\";\r\n    public inputPortColor: string = \"#299b91\";\r\n    public outputPortColor: string = \"#299b91\";\r\n    public textColor: string = \"#f7f7f7\";\r\n\r\n    public fontFamily: string = \"Ubuntu, sans-serif\";\r\n    public headerFontWeight: number = 400;\r\n    public labelsFontWeight: number = 300;\r\n\r\n    public segmentStyle = new SegmentStyle();\r\n}\r\n\r\nexport class NodeDimension {\r\n    private _width: number;\r\n    private _headHeight: number;\r\n    private _segmentHeight: number;\r\n    private _footerHeight: number;\r\n\r\n    constructor(width: number, headHeight: number, segmentHeight: number, stopperHeight: number) {\r\n        this._width = width;\r\n        this._headHeight = headHeight;\r\n        this._segmentHeight = segmentHeight;\r\n        this._footerHeight = stopperHeight;\r\n    }\r\n\r\n    public equals(nodeDim: NodeDimension): boolean {\r\n        return this._width === nodeDim.width && this._headHeight === nodeDim.headHeight\r\n            && this._segmentHeight === nodeDim.segmentHeight && this._footerHeight === nodeDim.footerHeight;\r\n    }\r\n\r\n    public clone(): NodeDimension {\r\n        return new NodeDimension(this._width, this._headHeight, this._segmentHeight, this._footerHeight);\r\n    }\r\n\r\n    get width(): number {\r\n        return this._width;\r\n    }\r\n\r\n    set width(value: number) {\r\n        this._width = value;\r\n    }\r\n\r\n    get headHeight(): number {\r\n        return this._headHeight;\r\n    }\r\n\r\n    set headHeight(value: number) {\r\n        this._headHeight = value;\r\n    }\r\n\r\n    get segmentHeight(): number {\r\n        return this._segmentHeight;\r\n    }\r\n\r\n    set segmentHeight(value: number) {\r\n        this._segmentHeight = value;\r\n    }\r\n\r\n    get footerHeight(): number {\r\n        return this._footerHeight;\r\n    }\r\n\r\n    set footerHeight(value: number) {\r\n        this._footerHeight = value;\r\n    }\r\n}\r\n\r\nexport class NodeViewProperties {\r\n    private _selected: boolean = false;\r\n    private _rolledUp: boolean = false;\r\n    private _aboutToDelete: boolean = false;\r\n    private readonly _nodeStyle: NodeStyle = defaultNodeStyle;\r\n    private readonly _dimensions: NodeDimension;\r\n    private _x: number;\r\n    private _y: number;\r\n\r\n\r\n    constructor(dimensions: NodeDimension, x: number, y: number, nodeStyle?: NodeStyle) {\r\n        if (nodeStyle) {\r\n            this._nodeStyle = nodeStyle;\r\n        }\r\n        this._dimensions = dimensions;\r\n        this._x = x;\r\n        this._y = y;\r\n    }\r\n\r\n    get dimensions(): NodeDimension {\r\n        return this._dimensions;\r\n    }\r\n\r\n    get selected(): boolean {\r\n        return this._selected;\r\n    }\r\n\r\n    set selected(value: boolean) {\r\n        this._selected = value;\r\n    }\r\n\r\n    get nodeStyle(): NodeStyle {\r\n        return this._nodeStyle;\r\n    }\r\n\r\n    get x(): number {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: number) {\r\n        this._x = value;\r\n    }\r\n\r\n    get y(): number {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: number) {\r\n        this._y = value;\r\n    }\r\n\r\n    get rolledUp(): boolean {\r\n        return this._rolledUp;\r\n    }\r\n\r\n    set rolledUp(value: boolean) {\r\n        this._rolledUp = value;\r\n    }\r\n\r\n    get aboutToDelete(): boolean {\r\n        return this._aboutToDelete;\r\n    }\r\n\r\n    set aboutToDelete(value: boolean) {\r\n        this._aboutToDelete = value;\r\n    }\r\n}\r\n\r\nexport class NodeModel {\r\n    public readonly id: number;\r\n    public readonly name: string;\r\n    private readonly _valueFunction: NodeValueFunction<any>;\r\n    private readonly _viewProperties: NodeViewProperties;\r\n    private _segments: SegmentModel<any>[] = [];\r\n    private _links: LinkModel[] = [];\r\n\r\n    constructor(id: number, name: string,\r\n                x: number, y: number,\r\n                dimensions: NodeDimension,\r\n                valueFunction: NodeValueFunction<any>,\r\n                nodeStyle?: NodeStyle,\r\n                segments?: SegmentModel<any>[],) {\r\n        this.id = id;\r\n        this.name = name;\r\n\r\n        this._valueFunction = valueFunction;\r\n        this._viewProperties = new NodeViewProperties(\r\n            dimensions, x, y, nodeStyle);\r\n\r\n        if (segments != null) {\r\n            segments.forEach(s => this.addSegment(s));\r\n        }\r\n    }\r\n\r\n    addSegment(segment: SegmentModel<any>) {\r\n        if (!segment.isInitialized) {\r\n            segment.initialize(this, this._segments.length, this.dimensions);\r\n            this._segments.push(segment);\r\n            if (segment.spacesOccupied > 1) {\r\n                for (let i = 0; i < segment.spacesOccupied - 1; i++) {\r\n                    let temp = new PlaceholderSegmentModel();\r\n                    temp.initialize(this, this._segments.length, this.dimensions);\r\n                    this._segments.push(temp);\r\n                }\r\n            }\r\n        } else {\r\n            throw new Error(\"Segment can belong only to one Node\");\r\n        }\r\n    }\r\n\r\n    addLink(link: LinkModel) {\r\n        this._links.push(link);\r\n    }\r\n\r\n    removeLink(link: LinkModel) {\r\n        // debugger;\r\n        let links = this.links.filter(e => e !== null);\r\n        for (let i = 0; i < links.length; i++) {\r\n            if (links[i].equals(link)) {\r\n                delete links[i];\r\n                break;\r\n            }\r\n        }\r\n        links = links.filter(e => e !== null && e !== undefined);\r\n        this._links = links;\r\n    }\r\n\r\n    getNodeValue(outputIndex: number): Promise<any> {\r\n        return this._valueFunction.getNodeValue(this, outputIndex);\r\n    }\r\n\r\n    getSegmentLinks(segmentIndex: number): LinkModel[] {\r\n        let segmentLinks: LinkModel[] = [];\r\n        if (this._segments[segmentIndex].portType === PortType.OUTPUT) {\r\n            this._links.forEach(l => {\r\n                if (l.outputSegment.index === segmentIndex) {\r\n                    segmentLinks.push(l);\r\n                }\r\n            })\r\n        } else if (this._segments[segmentIndex].portType === PortType.INPUT) {\r\n            this._links.forEach(l => {\r\n                if (l.inputSegment.index === segmentIndex) {\r\n                    segmentLinks.push(l);\r\n                }\r\n            })\r\n        }\r\n\r\n        return segmentLinks\r\n    }\r\n\r\n    checkIfPointInsideNode(x: number, y: number): boolean {\r\n        let viewProps = this._viewProperties;\r\n        let dim = this._viewProperties.dimensions;\r\n        return x > viewProps.x && x < viewProps.x + dim.width &&\r\n            y > viewProps.y && y < viewProps.y + this.height;\r\n    }\r\n\r\n    get outputLinkNumber(): number {\r\n        let i = 0;\r\n        this._links.forEach(l => i = l.outputSegment.parent.id === this.id ? i + 1 : i);\r\n        return i;\r\n    }\r\n\r\n    get links(): LinkModel[] {\r\n        return this._links;\r\n    }\r\n\r\n    get x(): number {\r\n        return this._viewProperties.x;\r\n    }\r\n\r\n    set x(value: number) {\r\n        this._viewProperties.x = value;\r\n    }\r\n\r\n    get y(): number {\r\n        return this._viewProperties.y;\r\n    }\r\n\r\n    set y(value: number) {\r\n        this._viewProperties.y = value;\r\n    }\r\n\r\n    get dimensions(): NodeDimension {\r\n        return this._viewProperties.dimensions;\r\n    }\r\n\r\n    get height(): number {\r\n        let dim = this._viewProperties.dimensions;\r\n        return dim.headHeight + dim.footerHeight +\r\n            this.segments.length * dim.segmentHeight;\r\n    }\r\n\r\n    get segments(): SegmentModel<any>[] {\r\n        return this._segments;\r\n    }\r\n\r\n    get nodeStyle(): NodeStyle {\r\n        return this._viewProperties.nodeStyle;\r\n    }\r\n\r\n    get style(): NodeStyle {\r\n        return this._viewProperties.nodeStyle;\r\n    }\r\n\r\n    get viewProperties(): NodeViewProperties {\r\n        return this._viewProperties;\r\n    }\r\n}\r\n\r\nexport const defaultNodeStyle = new NodeStyle();\r\n","import React, {PureComponent} from 'react';\r\nimport \"./Node.css\";\r\nimport {DummyValueFunction} from \"./NodeValueFunction\";\r\nimport {NodeStorage} from \"../NodeStorage\";\r\nimport {NodeCanvasViewProperties} from \"../NodeCanvasViewProperties\";\r\nimport {PressedKeys} from \"../NodeCanvas\";\r\nimport {NodeDimension, NodeModel, NodeStyle} from \"./NodeModel\";\r\n\r\nexport class NodeComponentState {\r\n    public x: number;\r\n    public y: number;\r\n    public selected: boolean;\r\n\r\n    constructor(x: number, y: number, selected: boolean) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.selected = selected;\r\n    }\r\n}\r\n\r\nexport class NodeComponentProps {\r\n    public node: NodeModel;\r\n    public storage: NodeStorage;\r\n    public canvasViewProps: NodeCanvasViewProperties;\r\n    public selected?: boolean;\r\n\r\n    constructor(node: NodeModel, storage: NodeStorage, currentScale: NodeCanvasViewProperties, selected?: boolean) {\r\n        this.node = node;\r\n        this.storage = storage;\r\n        this.canvasViewProps = currentScale;\r\n        this.selected = selected;\r\n    }\r\n}\r\n\r\nexport function createDefaultNode(id: number, name: string, x?: number, y?: number): NodeModel {\r\n    x = x ? x : 0;\r\n    y = y ? y : 0;\r\n    return new NodeModel(id, name, x, y,\r\n        new NodeDimension(180, 22, 25, 20),\r\n        new DummyValueFunction());\r\n}\r\n\r\nclass Node extends PureComponent<NodeComponentProps, NodeComponentState> {\r\n    private _nodeBackgroundRef = React.createRef<HTMLDivElement>();\r\n    private readonly width: number;\r\n    private readonly height: number;\r\n    private readonly nodeStyle: NodeStyle;\r\n    private lastTouchTime: number = 0;\r\n\r\n    constructor(props: NodeComponentProps) {\r\n        super(props);\r\n        let node = this.props.node;\r\n        this.width = node.dimensions.width;\r\n        this.height = (node.dimensions.headHeight\r\n            + node.dimensions.segmentHeight * node.segments.length\r\n            + node.dimensions.footerHeight);\r\n        this.nodeStyle = props.node.style;\r\n\r\n        this.state = new NodeComponentState(this.props.node.x, this.props.node.y, props.selected ? props.selected : false);\r\n    }\r\n\r\n    handleDeleteNodeOnKeyPress = (event: any) => {\r\n        if (this.state.selected && (event.code === \"Backspace\" || event.code === \"Delete\")) {\r\n            this.props.storage.handleRemoveNode(this.props.node);\r\n        }\r\n    }\r\n\r\n    handleClick = (event: any) => {\r\n        event.preventDefault();\r\n        this.setState({selected: true});\r\n        window.addEventListener(\"mousedown\", this.unselect);\r\n        this.props.storage.handleUpdateNode(this.props.node);\r\n        let mouseX = event.clientX, mouseY = event.clientY;\r\n\r\n        const moveNode = (event: any) => {\r\n            let x = this.state.x - (mouseX - event.clientX) / this.props.canvasViewProps.scale;\r\n            let y = this.state.y - (mouseY - event.clientY) / this.props.canvasViewProps.scale;\r\n\r\n            this.setState({x: x, y: y});\r\n            this.props.node.x = x;\r\n            this.props.node.y = y;\r\n\r\n            mouseX = event.clientX;\r\n            mouseY = event.clientY;\r\n            this.props.storage.handleUpdateNode(this.props.node);\r\n        }\r\n\r\n        const cleanUp = (event: any) => {\r\n            window.removeEventListener(\"mousemove\", moveNode);\r\n            window.removeEventListener(\"mouseup\", cleanUp);\r\n        }\r\n\r\n        window.addEventListener(\"mousemove\", moveNode);\r\n        window.addEventListener(\"mouseup\", cleanUp);\r\n    }\r\n\r\n    unselect = (event: any) => {\r\n        let shiftPressed = PressedKeys.keys.includes(\"ShiftLeft\");\r\n        if (this._nodeBackgroundRef.current && !shiftPressed) {\r\n            let nodeBox = this._nodeBackgroundRef.current.getBoundingClientRect();\r\n            if (event.clientX < nodeBox.left || event.clientX > nodeBox.left + nodeBox.width ||\r\n                event.clientY < nodeBox.top || event.clientY > nodeBox.top + nodeBox.height) {\r\n                this.setState({selected: false});\r\n                window.removeEventListener(\"click\", this.unselect);\r\n            }\r\n        } else if (!shiftPressed) {\r\n            this.setState({selected: false});\r\n            window.removeEventListener(\"click\", this.unselect);\r\n        }\r\n    }\r\n\r\n    handleTouch = (event: any) => {\r\n        event.preventDefault();\r\n        this.setState({selected: true});\r\n\r\n        let now = Date.now();\r\n        let viewProps = this.props.node.viewProperties;\r\n        if(viewProps.aboutToDelete) {\r\n            this.props.storage.handleRemoveNode(this.props.node);\r\n            return;\r\n        } else if(this.lastTouchTime - now < 1000) {\r\n            this.props.node.viewProperties.aboutToDelete = true;\r\n        }\r\n        window.addEventListener(\"touchstart\", this.touchUnselect);\r\n\r\n        this.props.storage.handleUpdateNode(this.props.node);\r\n        let screenX = event.touches[0].clientX;\r\n        let screenY = event.touches[0].clientY;\r\n\r\n        const moveNode = (event: any) => {\r\n            let touch = event.touches[0];\r\n            let x = this.state.x - (screenX - touch.screenX) / this.props.canvasViewProps.scale;\r\n            let y = this.state.y - (screenY - touch.screenY) / this.props.canvasViewProps.scale;\r\n\r\n            this.setState({x: x, y: y});\r\n            this.props.node.x = x;\r\n            this.props.node.y = y;\r\n\r\n            screenX = touch.screenX;\r\n            screenY = touch.screenY;\r\n            this.props.storage.handleUpdateNode(this.props.node);\r\n        }\r\n\r\n        const cleanUp = (event: any) => {\r\n            window.removeEventListener(\"touchmove\", moveNode);\r\n            window.removeEventListener(\"touchend\", cleanUp);\r\n        }\r\n\r\n        window.addEventListener(\"touchmove\", moveNode);\r\n        window.addEventListener(\"touchend\", cleanUp);\r\n    }\r\n\r\n    touchUnselect = (event: any) => {\r\n        let shiftPressed = PressedKeys.keys.includes(\"ShiftLeft\");\r\n        if (this._nodeBackgroundRef.current && !shiftPressed) {\r\n            let nodeBox = this._nodeBackgroundRef.current.getBoundingClientRect();\r\n            if (event.clientX < nodeBox.left || event.clientX > nodeBox.left + nodeBox.width ||\r\n                event.clientY < nodeBox.top || event.clientY > nodeBox.top + nodeBox.height) {\r\n                this.setState({selected: false});\r\n                window.removeEventListener(\"click\", this.touchUnselect);\r\n            }\r\n        } else if (!shiftPressed) {\r\n            this.props.node.viewProperties.aboutToDelete = false;\r\n            this.setState({selected: false});\r\n            window.removeEventListener(\"touchstart\", this.touchUnselect);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"keydown\", this.handleDeleteNodeOnKeyPress);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"keydown\", this.handleDeleteNodeOnKeyPress);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={\"nodeWrapper\"} style={{top: (this.state.y) + \"px\", left: (this.state.x) + \"px\"}}>\r\n                <div style={{position: \"absolute\", top: this.props.node.dimensions.headHeight}}>\r\n                </div>\r\n                {this.props.node.segments.map(s => s.createView(this.props.storage, this.props.canvasViewProps))}\r\n\r\n                <div ref={this._nodeBackgroundRef} className={\"nodeBackground\"}\r\n                     onMouseDown={this.handleClick}\r\n                     onTouchStart={this.handleTouch}\r\n                     style={{\r\n                         width: this.width + \"px\",\r\n                         height: this.height + \"px\",\r\n                         borderRadius: this.props.node.dimensions.headHeight,\r\n                         backgroundColor: this.nodeStyle.nodeBackgroundColor,\r\n                         boxShadow: \"0 0 3px 2px \" +\r\n                             (this.props.node.viewProperties.aboutToDelete? \"#AA0000\":\r\n                                 this.state.selected ? this.nodeStyle.headerColor:\r\n                                     \"#555e66\")\r\n                     }}>\r\n\r\n                    <span draggable=\"false\" className={\"header\"} style={{\r\n                        width: this.props.node.dimensions.width,\r\n                        height: this.props.node.dimensions.headHeight,\r\n                        color: this.nodeStyle.textColor,\r\n                        fontWeight: this.nodeStyle.headerFontWeight,\r\n                        backgroundColor: this.nodeStyle.headerColor\r\n                    }}>\r\n                        {this.props.node.name}\r\n                    </span>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Node;\r\n","export enum ChanelType {\r\n    RED = \"red\",\r\n    GREEN = \"green\",\r\n    BLUE = \"blue\",\r\n    ALPHA = \"alpha\"\r\n}\r\n\r\nexport enum ColorSpace {\r\n    RGB,\r\n    HSV,\r\n\r\n}\r\n\r\nexport class ImageLikeData {\r\n    private _numberOfChannels: number;\r\n    private _channels: boolean[];\r\n    private _data: Uint8ClampedArray;\r\n    private _width: number;\r\n    private _height: number;\r\n    private _colorSpace: ColorSpace;\r\n\r\n    constructor(data: Uint8ClampedArray, width: number, height: number, colorSpace?: ColorSpace, channels?: boolean[]) {\r\n        this._channels = channels ? channels : [true, true, true, true];\r\n        this._data = data;\r\n        this._width = width;\r\n        this._height = height;\r\n        let sum = 0;\r\n        this._channels.forEach(ch => sum = ch ? sum + 1 : sum);\r\n        this._numberOfChannels = sum;\r\n        this._colorSpace = colorSpace ? colorSpace : ColorSpace.RGB;\r\n    }\r\n\r\n    get numberOfChannels(): number {\r\n        return this._numberOfChannels;\r\n    }\r\n\r\n    get channels(): boolean[] {\r\n        return this._channels;\r\n    }\r\n\r\n    set channels(channels: boolean[]) {\r\n        this._channels = channels;\r\n        let sum = 0;\r\n        channels.forEach(ch => sum = ch ? sum + 1 : sum);\r\n        this._numberOfChannels = sum;\r\n    }\r\n\r\n    get data(): Uint8ClampedArray {\r\n        return this._data;\r\n    }\r\n\r\n    set data(value: Uint8ClampedArray) {\r\n        this._data = value;\r\n    }\r\n\r\n    get width(): number {\r\n        return this._width;\r\n    }\r\n\r\n    set width(value: number) {\r\n        this._width = value;\r\n    }\r\n\r\n    get height(): number {\r\n        return this._height;\r\n    }\r\n\r\n    set height(value: number) {\r\n        this._height = value;\r\n    }\r\n\r\n    get colorSpace(): ColorSpace {\r\n        return this._colorSpace;\r\n    }\r\n\r\n    set colorSpace(value: ColorSpace) {\r\n        this._colorSpace = value;\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport {PortType, SegmentModel} from \"./Segment\";\r\n\r\nclass Link extends Component<{ link: LinkModel }> {\r\n\r\n    handleClick = (event: any) => {\r\n        event.preventDefault();\r\n    }\r\n\r\n    createSVGStyle() {\r\n        return {\r\n            position: \"absolute\",\r\n            top: 0,\r\n            left: 0,\r\n            overflow: \"visible\",\r\n            width: \"100px\",\r\n            height: \"100px\",\r\n            zIndex: -10,\r\n            pointerEvents: \"none\"\r\n        } as React.CSSProperties\r\n    }\r\n\r\n    render() {\r\n        let outputX = this.props.link.outputSegment.calcPortLeftOffsetToCenter();\r\n        let outputY = this.props.link.outputSegment.calcPortTopOffsetToCenter();\r\n        let inputX = this.props.link.inputSegment.calcPortLeftOffsetToCenter();\r\n        let inputY = this.props.link.inputSegment.calcPortTopOffsetToCenter();\r\n        return (\r\n            <div style={{width: 0, height: 0}}>\r\n                <svg\r\n                    style={this.createSVGStyle()}>\r\n                    <path d={`M ${outputX}\r\n                                ${outputY}\r\n                                \r\n                                C ${(outputX + inputX) / 2} ${outputY} \r\n                                ${(outputX + inputX) / 2} ${inputY} \r\n                                \r\n                                ${inputX} ${inputY}`}\r\n\r\n                          onMouseDown={this.handleClick} onClick={event => event.preventDefault()}\r\n                          stroke=\"#334447\" strokeWidth=\"6px\" fill=\"transparent\"/>\r\n                </svg>\r\n                <svg style={this.createSVGStyle()}>\r\n                    <path d={`M ${outputX}\r\n                                ${outputY}\r\n                                \r\n                                C ${(outputX + inputX) / 2} ${outputY} \r\n                                ${(outputX + inputX) / 2} ${inputY} \r\n                                \r\n                                ${inputX} ${inputY}`}\r\n\r\n                          onMouseDown={this.handleClick} onClick={event => event.preventDefault()}\r\n                          stroke=\"#586673\" strokeWidth=\"4.5px\" fill=\"transparent\"/>\r\n                </svg>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class LinkModel {\r\n    private _outputSegment: SegmentModel<any>;\r\n    private _inputSegment: SegmentModel<any>;\r\n\r\n    constructor(outputSegment: SegmentModel<any>, inputSegment: SegmentModel<any>) {\r\n        if (outputSegment.portType === PortType.OUTPUT &&\r\n            inputSegment.portType === PortType.INPUT) {\r\n            this._outputSegment = outputSegment;\r\n            this._inputSegment = inputSegment;\r\n        } else {\r\n            throw new Error(\"Invalid port's types\");\r\n        }\r\n    }\r\n\r\n    equals(link: LinkModel): boolean {\r\n        return this._outputSegment.index === link.outputSegment.index &&\r\n            this._outputSegment.parent.id === link.outputSegment.parent.id &&\r\n            this._inputSegment.index === link.inputSegment.index &&\r\n            this._inputSegment.parent.id === link.inputSegment.parent.id;\r\n    }\r\n\r\n    get outputSegment(): SegmentModel<any> {\r\n        return this._outputSegment;\r\n    }\r\n\r\n    get inputSegment(): SegmentModel<any> {\r\n        return this._inputSegment;\r\n    }\r\n}\r\n\r\nexport default Link;","import React, {Component} from 'react';\r\nimport Node from \"./node-atomic/Node\";\r\nimport Link, {LinkModel} from \"./node-atomic/Link\";\r\nimport {NodeStorage, NodeStorageListener} from \"./NodeStorage\";\r\nimport {NodeCanvasViewProperties} from \"./NodeCanvasViewProperties\";\r\nimport \"./NodeCanvas.css\"\r\nimport {NodeModel} from \"./node-atomic/NodeModel\";\r\n\r\nexport const PressedKeys: { keys: string[] } = {\r\n    keys: []\r\n}\r\n\r\nexport class NodeCanvasState {\r\n    public viewProperties: NodeCanvasViewProperties;\r\n    public nodes: NodeModel[];\r\n    public links: LinkModel[];\r\n\r\n    constructor(viewProperties: NodeCanvasViewProperties, nodes: NodeModel[], links: LinkModel[]) {\r\n        this.viewProperties = viewProperties;\r\n        this.nodes = nodes;\r\n        this.links = links;\r\n    }\r\n}\r\n\r\nexport class NodeCanvasProps {\r\n    storage: NodeStorage;\r\n    viewProps: NodeCanvasViewProperties\r\n\r\n    constructor(storage: NodeStorage, viewProps: NodeCanvasViewProperties) {\r\n        this.storage = storage;\r\n        this.viewProps = viewProps;\r\n    }\r\n}\r\n\r\nclass NodeCanvas extends Component<NodeCanvasProps, NodeCanvasState> {\r\n    protected storageListener: NodeStorageListener = ((nodes, links) =>\r\n        this.setState({nodes: nodes, links: links}));\r\n    private listenerId: number = 0;\r\n    protected canvasRef = React.createRef<HTMLDivElement>();\r\n\r\n    constructor(props: NodeCanvasProps) {\r\n        super(props);\r\n        this.state = new NodeCanvasState(props.viewProps, props.storage.getNodes(), props.storage.getLinks());\r\n    }\r\n\r\n    handleMove = (event: any) => {\r\n        let time = Date.now();\r\n        let mouseX = event.clientX;\r\n        let mouseY = event.clientY;\r\n        const transform = (event: any) => {\r\n            if (Date.now() - time > 5) {\r\n                event.preventDefault();\r\n                this.state.viewProperties.shiftLeft =\r\n                    this.state.viewProperties.shiftLeft - (mouseX - event.clientX) / this.state.viewProperties.scale;\r\n                this.state.viewProperties.shiftTop =\r\n                    this.state.viewProperties.shiftTop - (mouseY - event.clientY) / this.state.viewProperties.scale;\r\n\r\n                mouseX = event.clientX;\r\n                mouseY = event.clientY;\r\n                time = Date.now();\r\n                this.setState({\r\n                    viewProperties: this.state.viewProperties\r\n                });\r\n            }\r\n        }\r\n\r\n        window.addEventListener(\"mousemove\", transform);\r\n        window.addEventListener(\"mouseup\",\r\n            () => window.removeEventListener(\"mousemove\", transform));\r\n    }\r\n\r\n    handleScroll = (event: any) => {\r\n        let offset = event.deltaMode === 0 ? event.deltaY : event.deltaY * 50;\r\n        let newScale = this.state.viewProperties.scale - offset * 0.001;\r\n        newScale = newScale < 0.15 ? 0.15 : newScale > 20 ? 20 : newScale;\r\n\r\n        this.state.viewProperties.scale = newScale;\r\n        this.setState({\r\n            viewProperties: this.state.viewProperties\r\n        });\r\n    }\r\n\r\n    handleKeyDown = (event: any) => {\r\n        if (!PressedKeys.keys.includes(event.code)) {\r\n            PressedKeys.keys.push(event.code);\r\n        }\r\n    }\r\n\r\n    handleKeyUp = (event: any) => {\r\n        PressedKeys.keys = PressedKeys.keys.filter(k => k !== event.code);\r\n    }\r\n\r\n    preventDefault = (event: any) => {\r\n        event.preventDefault(event);\r\n        event.stopPropagation();\r\n        return false;\r\n    }\r\n\r\n    disableScroll = (event: any) => {\r\n        window.addEventListener(\"mousewheel\", this.preventDefault, {passive: false});\r\n        window.addEventListener(\"touchmove\", this.preventDefault, {passive: false});\r\n    }\r\n\r\n    enableScroll = (event: any) => {\r\n        window.removeEventListener(\"mousewheel\", this.preventDefault);\r\n        window.removeEventListener(\"touchmove\", this.preventDefault);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.canvasRef.current) {\r\n            let mainDiv = this.canvasRef.current;\r\n            let mainDivBox = mainDiv.getBoundingClientRect();\r\n            this.props.viewProps.width = mainDivBox.width;\r\n            this.props.viewProps.height = mainDivBox.height;\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.listenerId = this.props.storage.addUpdateListener(this.storageListener);\r\n        if (this.canvasRef.current) {\r\n            let mainDiv = this.canvasRef.current;\r\n            let mainDivBox = mainDiv.getBoundingClientRect();\r\n            this.props.viewProps.width = mainDivBox.width;\r\n            this.props.viewProps.height = mainDivBox.height;\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.storage.removeUpdateListener(this.listenerId);\r\n    }\r\n\r\n    handleTouch = (event: any) => {\r\n        this.disableScroll(event);\r\n        if (event.touches.length == 1) {\r\n            this.handleTouchMove(event);\r\n        } else {\r\n            this.handleTouchScale(event);\r\n        }\r\n    }\r\n\r\n    handleTouchMove = (event: any) => {\r\n        let time = Date.now();\r\n        let x1 = event.touches[0].screenX;\r\n        let y1 = event.touches[0].screenY;\r\n        const onTouchMove = (event: any) => {\r\n            if (event.touches.length > 1) {\r\n                endTouch(event);\r\n            } else if (Date.now() - time > 5) {\r\n                let viewProps = this.state.viewProperties;\r\n                let touch = event.touches[0];\r\n                viewProps.shiftTop += (touch.screenY - y1) / viewProps.scale;\r\n                y1 = touch.screenY;\r\n                viewProps.shiftLeft += (touch.screenX - x1) / viewProps.scale;\r\n                x1 = touch.screenX;\r\n                time = Date.now();\r\n                this.setState({viewProperties: viewProps});\r\n            }\r\n        }\r\n        const endTouch = (event: any) => {\r\n            window.removeEventListener(\"touchend\", endTouch);\r\n            window.removeEventListener(\"touchmove\", onTouchMove);\r\n        }\r\n        window.addEventListener(\"touchmove\", onTouchMove);\r\n        window.addEventListener(\"touchend\", endTouch);\r\n    }\r\n\r\n    handleTouchScale = (event: any) => {\r\n        let time = Date.now();\r\n        let x1 = event.touches[0].screenX;\r\n        let y1 = event.touches[0].screenY;\r\n        let x2 = event.touches[1].screenX;\r\n        let y2 = event.touches[1].screenY;\r\n        let originalDistance = Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\r\n        let originalScale = this.state.viewProperties.scale;\r\n        const onTouchMove = (event: any) => {\r\n            if (Date.now() - time > 5) {\r\n                x1 = event.touches[0].screenX;\r\n                y1 = event.touches[0].screenY;\r\n                x2 = event.touches[1].screenX;\r\n                y2 = event.touches[1].screenY;\r\n                let newDistance = Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\r\n                this.state.viewProperties.scale = originalScale * (newDistance / originalDistance);\r\n                time = Date.now();\r\n                this.setState({viewProperties: this.state.viewProperties});\r\n            }\r\n        }\r\n\r\n        const onTouchEnd = (event: any) => {\r\n            if (event.touches.length < 2) {\r\n                window.removeEventListener(\"touchmove\", onTouchMove);\r\n                window.removeEventListener(\"touchend\", onTouchEnd);\r\n            }\r\n        }\r\n        window.addEventListener(\"touchmove\", onTouchMove);\r\n        window.addEventListener(\"touchend\", onTouchEnd);\r\n    }\r\n\r\n    render() {\r\n        let key = 0;\r\n        return (\r\n            <div onMouseEnter={this.disableScroll} onMouseLeave={this.enableScroll}\r\n                 onKeyDown={this.handleKeyDown} onKeyUp={this.handleKeyUp}\r\n                 ref={this.canvasRef} className={\"Background\"} onWheel={this.handleScroll}\r\n                 style={{\r\n                     width: \"100%\",\r\n                     height: \"100%\",\r\n                     overflow: \"hidden\",\r\n                     position: \"absolute\",\r\n                     top: 0,\r\n                     left: 0,\r\n                     margin: 0,\r\n                     padding: 0\r\n                 }}\r\n                 draggable={\"false\"} unselectable={\"on\"}\r\n            >\r\n\r\n                <div style={{\r\n                    position: \"absolute\",\r\n                    backgroundColor: \"#ddaaaa\",\r\n                    left: \"50%\",\r\n                    top: \"50%\",\r\n                    transform: `scale(${this.state.viewProperties.scale}) translate(${this.state.viewProperties.shiftLeft}px, \r\n                    ${this.state.viewProperties.shiftTop}px)`,\r\n                    transition: `transform 0.05s 0 linear`\r\n                }}>\r\n\r\n                    {this.state.nodes.map(n => <Node key={n.id} node={n}\r\n                                                     canvasViewProps={this.state.viewProperties}\r\n                                                     storage={this.props.storage}/>)\r\n                    }\r\n\r\n                    {\r\n                        this.state.links.map(\r\n                            l => <Link link={l} key={key++}/>)\r\n                    }\r\n                </div>\r\n\r\n                <div style={{width: \"inherit\", height: \"inherit\"}}\r\n                     onMouseDown={this.handleMove} onTouchStart={this.handleTouch}\r\n                     onTouchEnd={this.enableScroll} onTouchCancel={this.enableScroll}>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NodeCanvas;","import React, {Component} from 'react';\r\nimport {NodeModel} from \"./node-atomic/NodeModel\";\r\n\r\nclass Props {\r\n    nodes: NodeModel[];\r\n\r\n    constructor(nodes: NodeModel[]) {\r\n        this.nodes = nodes;\r\n    }\r\n}\r\n\r\nclass RenderWindow extends Component<Props, { lastUpdate: number }> {\r\n    private ref = React.createRef<HTMLCanvasElement>();\r\n\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {lastUpdate: 0};\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<any>, snapshot?: any) {\r\n        if (Date.now() - this.state.lastUpdate > 1000) {\r\n            let outputNode: NodeModel | null = null;\r\n            let nodes = this.props.nodes;\r\n            for (let i = 0; i < nodes.length; i++) {\r\n                if (nodes[i].name === \"Output\") {\r\n                    outputNode = nodes[i];\r\n                    break;\r\n                }\r\n            }\r\n            this.setState({lastUpdate: Date.now()});\r\n            if (outputNode !== null) {\r\n                this.paintOutput(outputNode);\r\n            }\r\n        }\r\n    }\r\n\r\n    paintOutput(outputNode: NodeModel) {\r\n        try {\r\n            outputNode.getNodeValue(0).then(\r\n                value => this.paintCanvas(value),\r\n                reason => console.log(\"something went wrong\")\r\n            );\r\n        } catch (e: any) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    paintCanvas = (imageData: ImageData) => {\r\n        if (this.ref.current) {\r\n            let temp = document.createElement(\"canvas\") as HTMLCanvasElement;\r\n            temp.width = imageData.width;\r\n            temp.height = imageData.height;\r\n            let tempCTX = temp.getContext(\"2d\") as CanvasRenderingContext2D;\r\n            tempCTX.putImageData(imageData, 0, 0);\r\n\r\n            let canvas = this.ref.current;\r\n            let maxW = (this.ref.current.closest(\"div\") as HTMLDivElement).clientWidth;\r\n            let maxH = (this.ref.current.closest(\"div\") as HTMLDivElement).clientHeight;\r\n            let width: number;\r\n            let height: number;\r\n            if ((maxW / imageData.width) * imageData.height < maxH) {\r\n                width = maxW;\r\n                height = (maxW / imageData.width) * imageData.height;\r\n            } else {\r\n                height = maxH;\r\n                width = (maxH / imageData.height) * imageData.width;\r\n            }\r\n            canvas.width = maxW;\r\n            canvas.height = maxH;\r\n            let ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n            ctx.drawImage(temp, 0, 0, imageData.width, imageData.height,\r\n                (maxW - width) / 2, (maxH - height) / 2, width, height);\r\n\r\n        } else {\r\n            throw new Error(\"Output node has to be connected to node returning image\");\r\n        }\r\n\r\n        this.setState({lastUpdate: Date.now()});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <canvas ref={this.ref}/>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default RenderWindow;","import React, {Component} from \"react\";\r\nimport {mainColors} from \"../App\";\r\n\r\nexport interface ButtonOnClick {\r\n    (event: any): void;\r\n}\r\n\r\nexport class ButtonContent {\r\n    public label: string;\r\n    public onClick: ButtonOnClick;\r\n\r\n    constructor(label: string, onClick: ButtonOnClick) {\r\n        this.label = label;\r\n        this.onClick = onClick;\r\n    }\r\n}\r\n\r\nexport class Button extends Component<{ label: string, onClick: ButtonOnClick, height?: number }, { hover: boolean }> {\r\n    constructor(props: { label: string, onClick: ButtonOnClick, height?: number },) {\r\n        super(props);\r\n        this.state = {hover: false};\r\n    }\r\n\r\n    handleMouseEnter = () => {\r\n        this.setState({hover: true});\r\n        document.body.style.cursor = \"pointer\";\r\n    }\r\n\r\n    handleMouseLeave = () => {\r\n        this.setState({hover: false});\r\n        document.body.style.cursor = \"auto\";\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div onClick={this.props.onClick}\r\n                 onMouseEnter={this.handleMouseEnter}\r\n                 onMouseLeave={this.handleMouseLeave}\r\n                 style={{\r\n                     position: \"relative\", height: this.props.height ? this.props.height : \"80%\",\r\n                     marginTop: \"auto\", marginBottom: \"auto\",\r\n                     paddingLeft: \"10px\", paddingRight: \"10px\",\r\n                     backgroundColor: \"inherit\",\r\n                     color: this.state.hover ? mainColors.headerColor : mainColors.color,\r\n\r\n                     display: \"flex\", justifyContent: \"center\", alignItems: \"center\"\r\n                 }}>\r\n                <span>\r\n                {this.props.label}\r\n                </span>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, {Component} from \"react\";\r\nimport {mainColors} from \"../App\";\r\nimport \"./UnfoldingButton.css\";\r\nimport {ButtonContent, ButtonOnClick} from \"./Button\";\r\n\r\nexport class UnfoldingButtonProps {\r\n    label: string;\r\n    subButtonsContent: ButtonContent[];\r\n    unfocusedOnClick: boolean;\r\n    height?: number;\r\n\r\n    constructor(label: string, subButtonsContent: ButtonContent[], unfocusOnClick: boolean, height: number) {\r\n        this.label = label;\r\n        this.subButtonsContent = subButtonsContent;\r\n        this.unfocusedOnClick = unfocusOnClick;\r\n        this.height = height;\r\n    }\r\n}\r\n\r\nexport class UnfoldingButton extends Component<UnfoldingButtonProps, { hover: boolean }> {\r\n    private ref = React.createRef<HTMLDivElement>();\r\n\r\n    constructor(props: UnfoldingButtonProps) {\r\n        super(props);\r\n        this.state = {hover: false};\r\n    }\r\n\r\n    handleMouseEnter = () => {\r\n        this.setState({hover: true});\r\n        document.body.style.cursor = \"pointer\";\r\n    }\r\n\r\n    handleMouseLeave = () => {\r\n        this.setState({hover: false});\r\n        document.body.style.cursor = \"auto\";\r\n    }\r\n\r\n    calcDivWith() {\r\n        if (this.ref.current) {\r\n            let div = this.ref.current;\r\n            console.log(div.clientWidth);\r\n            return div.clientWidth;\r\n        } else {\r\n            return 100;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let key = 0;\r\n        return (\r\n            <div ref={this.ref} onMouseEnter={this.handleMouseEnter}\r\n                 onMouseLeave={this.handleMouseLeave} onClick={() => this.setState({hover: false})}\r\n                 style={{\r\n                     position: \"relative\", height: this.props.height ? this.props.height : \"100%\",\r\n                     marginTop: \"auto\", marginBottom: \"auto\",\r\n                     paddingLeft: \"10px\", paddingRight: \"10px\",\r\n                     backgroundColor: \"inherit\",\r\n                     color: this.state.hover ? mainColors.headerColor : mainColors.color,\r\n\r\n                     display: \"flex\", justifyContent: \"center\", alignItems: \"center\"\r\n                 }}>\r\n\r\n                <span>\r\n                    {this.props.label}\r\n                </span>\r\n\r\n                {this.state.hover ?\r\n                    <li className={\"scroll\"} style={{\r\n                        position: \"absolute\", paddingTop: \"5%\", top: \"100%\", left: 0,\r\n                        maxHeight: \"600%\",\r\n                        overflow: \"auto\",\r\n                        minWidth: this.calcDivWith(),\r\n                        listStyle: \"none\", zIndex: 10000,\r\n                        backgroundColor: \"inherit\",\r\n                        borderBottomLeftRadius: \"10px\",\r\n                        borderBottomRightRadius: \"10px\"\r\n                    }}>\r\n                        {this.props.subButtonsContent.map(\r\n                            sc => (<ListItem content={sc.label} clickEvent={sc.onClick} key={key++}/>)\r\n                        )}\r\n                    </li> :\r\n                    <div/>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass ListItem extends Component<{ content: string, clickEvent: ButtonOnClick }, { hover: boolean }> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {hover: false};\r\n    }\r\n\r\n    handleMouseEnter = () => {\r\n        this.setState({hover: true});\r\n    }\r\n\r\n    handleMouseLeave = () => {\r\n        this.setState({hover: false});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ul onClick={this.props.clickEvent} onMouseEnter={this.handleMouseEnter}\r\n                onMouseLeave={this.handleMouseLeave}\r\n                style={{\r\n                    width: \"100%\", padding: 0, textAlign: \"center\", marginBottom: \"10px\", marginTop: 0,\r\n                    color: this.state.hover ? mainColors.headerColor : mainColors.color\r\n                }}>\r\n                <div style={{\r\n                    width: \"80%\",\r\n                    marginLeft: \"10%\",\r\n                    marginBottom: \"inherit\",\r\n                    borderTop: \"2px dotted \" + mainColors.headerColor\r\n                }}/>\r\n                {this.props.content}\r\n\r\n            </ul>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UnfoldingButton;","export const WebWorkerCreator = (worker: any): Worker => {\r\n    const code = worker.toString();\r\n    const blob = new Blob(['(' + code + ')()']);\r\n    return new Worker(URL.createObjectURL(blob));\r\n}\r\n\r\nexport default WebWorkerCreator;","import {ImageWorker} from \"../ImageWorker\";\r\nimport {ImageLikeData} from \"../structs/ImageLikeData\";\r\nimport WorkerLoader from \"../WorkerLoader\";\r\n\r\nconst CapBrightnessWorker = () => {\r\n    self.addEventListener(\"message\", (message: MessageEvent<{ imgArray: Uint8ClampedArray, capValue: number, capMax: boolean }>) => { // eslint-disable-line no-restricted-globals\r\n        const capValue = message.data.capValue;\r\n        const capAtMax = message.data.capMax;\r\n        let data = message.data.imgArray;\r\n\r\n        let j: number;\r\n        let j3: number;\r\n        let pxValue: number;\r\n        let multiplayer: number;\r\n        let newValue: number;\r\n        for (let i = 0; i < data.length; i += 4) {\r\n            j = i;\r\n            j3 = j + 3;\r\n\r\n            pxValue = Math.max(Math.max(data[i], data[i + 1]), data[i + 2]);\r\n\r\n            if ((!capAtMax && pxValue < capValue) || (capAtMax && pxValue > capValue)) {\r\n                if (pxValue === 0) {\r\n                    for (j; j < j3; j++) {\r\n                        data[j] = capValue;\r\n                    }\r\n                } else {\r\n                    multiplayer = capValue / pxValue;\r\n                    for (j; j < j3; j++) {\r\n                        newValue = Math.floor(data[j] * multiplayer);\r\n                        data[j] = newValue < 0 ? 0 : newValue > 255 ? 255 : newValue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // @ts-ignore\r\n        postMessage(data, [data.buffer]);\r\n    });\r\n}\r\n\r\nexport default CapBrightnessWorker;\r\n\r\nexport class CapBrightnessParams {\r\n    public capValue: number;\r\n    public capMax: boolean;\r\n\r\n    constructor(capValue: number, capMax: boolean) {\r\n        this.capValue = capValue;\r\n        this.capMax = capMax;\r\n    }\r\n}\r\n\r\nexport class CapBrightnessImageWorker implements ImageWorker<ImageLikeData, CapBrightnessParams, ImageLikeData> {\r\n    private params: CapBrightnessParams;\r\n    private worker: Worker = WorkerLoader(CapBrightnessWorker);\r\n    private _isBusy: boolean = false;\r\n\r\n    constructor(parameters: CapBrightnessParams) {\r\n        this.params = parameters;\r\n    }\r\n\r\n    isBusy(): boolean {\r\n        return this._isBusy;\r\n    }\r\n\r\n    run(inputData: ImageLikeData): Promise<ImageLikeData> {\r\n        if (this._isBusy) {\r\n            return Promise.reject(\"Worker is busy\");\r\n        }\r\n        this._isBusy = true;\r\n        return new Promise<ImageLikeData>((resolve, reject) => {\r\n            this.worker.onmessage = (message: MessageEvent<Uint8ClampedArray>) => {\r\n                inputData.data = message.data;\r\n                this._isBusy = false;\r\n                resolve(inputData);\r\n            }\r\n            this.worker.onmessageerror = e => {\r\n                this._isBusy = false;\r\n                reject(\"Worker error\");\r\n            }\r\n            this.worker.onerror = e => {\r\n                this._isBusy = false;\r\n                reject(\"Worker error\");\r\n            }\r\n\r\n            this.worker.postMessage({\r\n                imgArray: inputData.data,\r\n                capValue: this.params.capValue,\r\n                capMax: this.params.capMax\r\n            }, [inputData.data.buffer]);\r\n        });\r\n    }\r\n\r\n    getParams(): CapBrightnessParams {\r\n        return this.params;\r\n    }\r\n\r\n    setParams(parameters: CapBrightnessParams): void {\r\n        this.params = parameters;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Segment, {PortType, SegmentModel, SegmentProps} from \"../Segment\";\r\nimport {NodeStorage} from \"../../NodeStorage\";\r\nimport {NodeCanvasViewProperties} from \"../../NodeCanvasViewProperties\";\r\n\r\nclass OutputSegment extends Segment<null, SegmentProps<null>, any> {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div draggable={\"false\"} style={this.createOutputLabelStyle()}>{this.props.segment.label}</div>\r\n                {this.createPort()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default OutputSegment;\r\n\r\nexport class OutputSegmentModel extends SegmentModel<null> {\r\n\r\n    constructor(label: string) {\r\n        super(label, null, PortType.OUTPUT);\r\n    }\r\n\r\n    createView(storage: NodeStorage, currentScale: NodeCanvasViewProperties): JSX.Element {\r\n        return <OutputSegment storage={storage} segment={this} currentScale={currentScale} key={this.index}/>\r\n    }\r\n}","import React from 'react';\r\nimport Segment, {PortType, SegmentModel, SegmentProps} from \"../Segment\";\r\nimport {NodeStorage} from \"../../NodeStorage\";\r\nimport {NodeCanvasViewProperties} from \"../../NodeCanvasViewProperties\";\r\n\r\nclass InputSegment extends Segment<null, SegmentProps<null>, any> {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div draggable={\"false\"} style={this.createInputLabelStyle()}>{this.props.segment.label}</div>\r\n                {this.createPort()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default InputSegment;\r\n\r\nexport class InputSegmentModel extends SegmentModel<null> {\r\n\r\n    constructor(label: string) {\r\n        super(label, null, PortType.INPUT);\r\n    }\r\n\r\n    createView(storage: NodeStorage, currentScale: NodeCanvasViewProperties): JSX.Element {\r\n        return <InputSegment storage={storage} segment={this} currentScale={currentScale} key={this.index}/>\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport Segment, {PortType, SegmentModel, SegmentProps} from \"../Segment\";\r\nimport {NodeStorage} from \"../../NodeStorage\";\r\nimport \"./OptionSegment.css\"\r\nimport {mainColors} from \"../../../App\";\r\nimport {NodeCanvasViewProperties} from \"../../NodeCanvasViewProperties\";\r\n\r\nexport class OptionSegmentProps extends SegmentProps<string> {\r\n    public options: string[];\r\n\r\n    constructor(segment: SegmentModel<string>, storage: NodeStorage, currentScale: NodeCanvasViewProperties, options: string[]) {\r\n        super(segment, storage, currentScale);\r\n        this.options = options;\r\n    }\r\n}\r\n\r\nexport class OptionSegment extends Segment<string, OptionSegmentProps, { selectedOption: string, selected: boolean }> {\r\n\r\n    constructor(props: OptionSegmentProps) {\r\n        super(props);\r\n        this.state = {selectedOption: props.options[0], selected: false}\r\n    }\r\n\r\n    handleClick = () => {\r\n        if (this.state.selected) {\r\n            return;\r\n        }\r\n        let cancel: boolean = false;\r\n        this.setState({selected: true});\r\n        const cancelSelection = (event: any) => {\r\n            if (cancel) {\r\n                this.setState({selected: false});\r\n                window.removeEventListener(\"click\", cancelSelection);\r\n                cancel = false;\r\n            } else {\r\n                cancel = true;\r\n            }\r\n        }\r\n        window.addEventListener(\"click\", cancelSelection);\r\n    }\r\n\r\n    handleMouseEnter = () => {\r\n        document.body.style.cursor = \"pointer\";\r\n    }\r\n\r\n    handleMouseLeave = () => {\r\n        document.body.style.cursor = \"auto\";\r\n    }\r\n\r\n    handleChange = (value: string) => {\r\n        this.setState({selectedOption: value})\r\n        this.props.segment.value = value;\r\n    }\r\n\r\n    createSelectStyle() {\r\n        return {\r\n            position: \"absolute\",\r\n            top: this.topPosition,\r\n            marginTop: this.offsetTop,\r\n            marginLeft: this.offsetLeft,\r\n            width: this.width,\r\n            height: this.height,\r\n\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n\r\n            backgroundColor: this.nodeStyle.segmentColor,\r\n            border: \"1px solid \" + this.nodeStyle.borderColor,\r\n            borderTopLeftRadius: this.height / 2,\r\n            borderTopRightRadius: this.height / 2,\r\n            borderBottomLeftRadius: this.state.selected ? 0 : this.height / 2,\r\n            borderBottomRightRadius: this.state.selected ? 0 : this.height / 2,\r\n            fontFamily: this.nodeStyle.fontFamily,\r\n            fontSize: this.segmentStyle.fontSizeToSegmentHeight * this.props.segment.parentDimensions.segmentHeight,\r\n            fontWeight: this.nodeStyle.labelsFontWeight,\r\n            color: this.nodeStyle.textColor,\r\n            userSelect: \"none\",\r\n            boxShadow: this.state.selected ? \"0 0 2px 1px \" + this.nodeStyle.borderColor : \"none\"\r\n        } as React.CSSProperties\r\n    }\r\n\r\n    render() {\r\n        let key = 0;\r\n        return (\r\n            <div onClick={this.handleClick} onMouseEnter={this.handleMouseEnter}\r\n                 onMouseLeave={this.handleMouseLeave} style={this.createSelectStyle()}>\r\n                <span style={{position: \"absolute\", zIndex: this.state.selected ? 10000000 : \"inherit\"}}>\r\n                    {this.state.selectedOption}\r\n                </span>\r\n                <span style={{\r\n                    marginLeft: \"85%\",\r\n                    color: this.nodeStyle.headerColor,\r\n                    fontSize: this.segmentStyle.fontSizeToSegmentHeight * this.props.segment.parentDimensions.segmentHeight * 0.8,\r\n                    font: \"initial\"\r\n                }}>\r\n                    {this.state.selected ? \"⮜\" : \"⮟\"}\r\n                </span>\r\n\r\n                {this.state.selected ?\r\n                    <li className={\"scroll\"}\r\n                        onScroll={(event: any) => event.stopPropagation()}\r\n                        style={{\r\n                            position: \"absolute\", paddingTop: \"5%\", top: \"95%\", left: -1,\r\n                            maxHeight: \"1000%\",\r\n                            border: \"1px solid \" + this.nodeStyle.borderColor,\r\n                            borderTop: \"none\",\r\n                            boxSizing: \"content-box\",\r\n                            overflow: \"auto\",\r\n                            minWidth: this.width,\r\n                            listStyle: \"none\", zIndex: 10000,\r\n                            backgroundColor: \"inherit\",\r\n                            borderBottomLeftRadius: \"10px\",\r\n                            borderBottomRightRadius: \"10px\",\r\n                            boxShadow: \"0 2px 2px 1px \" + this.nodeStyle.borderColor\r\n                        }}>\r\n                        {this.props.options.filter(op => op !== this.state.selectedOption).map(\r\n                            op => (\r\n                                <ListItem content={op} clickListener={this.handleChange} asLabel={false} key={key++}/>)\r\n                        )}\r\n\r\n                        <ListItem content={this.props.segment.label} clickListener={() => {\r\n                        }} asLabel={true}/>\r\n                    </li> :\r\n                    <div/>}\r\n\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface clickListener {\r\n    (value: string): void;\r\n}\r\n\r\nclass ListItem extends Component<{ content: string, clickListener: clickListener, asLabel: boolean }, { hover: boolean }> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {hover: false};\r\n    }\r\n\r\n    handleMouseEnter = () => {\r\n        this.setState({hover: true});\r\n    }\r\n\r\n    handleMouseLeave = () => {\r\n        this.setState({hover: false});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ul onClick={() => this.props.clickListener(this.props.content)}\r\n                onMouseEnter={this.handleMouseEnter}\r\n                onMouseLeave={this.handleMouseLeave}\r\n                style={{\r\n                    width: \"100%\", padding: 0, textAlign: \"center\",\r\n                    marginTop: this.props.asLabel ? \"3px\" : 0,\r\n                    marginBottom: this.props.asLabel ? \"8px\" : \"3px\",\r\n                    fontWeight: this.props.asLabel ? 400 : \"inherit\",\r\n                    color: this.state.hover && !this.props.asLabel ? mainColors.headerColor : mainColors.color\r\n                }}>\r\n                <div style={{\r\n                    width: this.props.asLabel ? \"80%\" : \"70%\",\r\n                    marginLeft: this.props.asLabel ? \"10%\" : \"15%\",\r\n                    padding: 0,\r\n                    marginBottom: \"inherit\",\r\n                    borderTop: (this.props.asLabel ? \"2px \" : \"2px \") + (this.props.asLabel ? \"solid \" : \"dotted \") + mainColors.headerColor\r\n                }}/>\r\n                {this.props.content}\r\n\r\n            </ul>\r\n        );\r\n    }\r\n}\r\n\r\nexport class OptionSegmentModel extends SegmentModel<string> {\r\n    private readonly options: string[];\r\n\r\n    constructor(label: string, value: string, options: string[]) {\r\n        super(label, value, PortType.NO_PORT);\r\n        this.options = options;\r\n    }\r\n\r\n    createView(storage: NodeStorage, currentScale: NodeCanvasViewProperties): JSX.Element {\r\n        return <OptionSegment key={this._index} segment={this} storage={storage} currentScale={currentScale}\r\n                              options={this.options}/>;\r\n    }\r\n}\r\n\r\nexport default OptionSegment;","import {FileToLoad} from \"./FileToLoad\";\r\nimport {NodeDimension, NodeModel} from \"../../node-atomic/NodeModel\";\r\n\r\nexport class NodeSave {\r\n    public readonly id: number;\r\n    public readonly selected: boolean;\r\n    public readonly rolledUp: boolean;\r\n    public readonly nodeDimensions: NodeDimension | null;\r\n    public readonly x: number;\r\n    public readonly y: number;\r\n    public readonly fileToLoadList: FileToLoad[] = [];\r\n\r\n    constructor(nodeModel: NodeModel, nodeDefaultDim: NodeDimension) {\r\n        this.id = nodeModel.id;\r\n        this.selected = nodeModel.viewProperties.selected;\r\n        this.rolledUp = nodeModel.viewProperties.rolledUp;\r\n        this.x = nodeModel.x;\r\n        this.y = nodeModel.y;\r\n        if (!nodeDefaultDim.equals(nodeModel.dimensions)) {\r\n            let dim = nodeModel.dimensions;\r\n            this.nodeDimensions = new NodeDimension(\r\n                dim.width, dim.headHeight, dim.segmentHeight, dim.footerHeight\r\n            );\r\n        } else {\r\n            this.nodeDimensions = null;\r\n        }\r\n    }\r\n}","import Segment, {PortType, SegmentModel, SegmentProps} from \"../Segment\";\r\nimport \"./NumericSliderSegment.css\";\r\n\r\nimport React from 'react';\r\nimport {NodeStorage} from \"../../NodeStorage\";\r\nimport {NodeCanvasViewProperties} from \"../../NodeCanvasViewProperties\";\r\n\r\nclass NumericSliderSegmentProps extends SegmentProps<number> {\r\n    public minValue: number;\r\n    public maxValue: number;\r\n    public precision: number;\r\n\r\n    constructor(segment: SegmentModel<number>, storage: NodeStorage, currentScale: NodeCanvasViewProperties, minValue: number, maxValue: number, precision: number) {\r\n        super(segment, storage, currentScale);\r\n        this.minValue = minValue;\r\n        this.maxValue = maxValue;\r\n        this.precision = precision;\r\n    }\r\n}\r\n\r\nclass NumericSliderState {\r\n    fillPercentage: number;\r\n    focused: boolean;\r\n\r\n    constructor(fillPercentage: number, focused: boolean) {\r\n        this.fillPercentage = fillPercentage;\r\n        this.focused = focused;\r\n    }\r\n}\r\n\r\nexport class NumericSliderSegment extends Segment<number, NumericSliderSegmentProps, NumericSliderState> {\r\n    constructor(props: NumericSliderSegmentProps) {\r\n        super(props);\r\n        this.state = new NumericSliderState(\r\n            this.calculateFill(), false);\r\n    }\r\n\r\n    calculateFill = (): number => {\r\n        return (this.props.segment.value - this.props.minValue) /\r\n            (this.props.maxValue - this.props.minValue)\r\n    }\r\n\r\n    handleMouseDown = (e: any) => {\r\n        let box = e.target.getBoundingClientRect();\r\n        let x0 = e.clientX;\r\n        let startX = e.clientX;\r\n        let width = box.right - box.x;\r\n        document.body.style.cursor = \"none\";\r\n\r\n        const handleMove = (e: any) => {\r\n            let newFill = this.state.fillPercentage + (e.clientX - startX) / width;\r\n            newFill = newFill > 1 ? 1 : newFill < 0 ? 0 : newFill;\r\n            let newValue = (this.props.maxValue - this.props.minValue) * newFill + this.props.minValue;\r\n            this.props.segment.value = Math.floor(newValue * this.props.precision) / this.props.precision;\r\n            startX = e.clientX > box.right ? box.right : e.clientX < box.x ? box.x : e.clientX;\r\n            this.setState({fillPercentage: newFill});\r\n        }\r\n\r\n        const handleMouseUp = (e: any) => {\r\n            if (e.clientX === x0) {\r\n                this.setState({focused: true});\r\n                window.addEventListener(\"mousedown\", handleUnfocused);\r\n            }\r\n            document.body.style.cursor = \"auto\";\r\n            window.removeEventListener(\"mousemove\", handleMove);\r\n            window.removeEventListener(\"mouseup\", handleMouseUp);\r\n        }\r\n\r\n        const handleUnfocused = (e: any) => {\r\n            if (e.clientX < box.left || e.clientX > box.left + box.width ||\r\n                e.clientY < box.top || e.clientY > box.top + box.height) {\r\n                window.removeEventListener(\"mousedown\", handleUnfocused);\r\n                this.setState({focused: false});\r\n            }\r\n        }\r\n\r\n        window.addEventListener(\"mousemove\", handleMove);\r\n        window.addEventListener(\"mouseup\", handleMouseUp);\r\n    }\r\n\r\n    handleTouchDown = (e: any) => {\r\n        let touch = e.touches[0];\r\n        let box = e.target.getBoundingClientRect();\r\n        console.log(box.top);\r\n        let target = e.target;\r\n        let x0 = touch.screenX;\r\n        let startX = touch.screenX;\r\n        let width = box.right - box.x;\r\n        document.body.style.cursor = \"none\";\r\n\r\n        const handleMove = (e: any) => {\r\n            touch = e.touches[0];\r\n            let newFill = this.state.fillPercentage + (touch.screenX - startX) / width;\r\n            newFill = newFill > 1 ? 1 : newFill < 0 ? 0 : newFill;\r\n            let newValue = (this.props.maxValue - this.props.minValue) * newFill + this.props.minValue;\r\n            this.props.segment.value = Math.floor(newValue * this.props.precision) / this.props.precision;\r\n            startX = touch.screenX > box.right ? box.right : touch.screenX < box.x ? box.x : touch.screenX;\r\n            this.setState({fillPercentage: newFill});\r\n        }\r\n\r\n        const handleTouchEnd = (e: any) => {\r\n            if (startX === x0) {\r\n                this.setState({focused: true});\r\n                window.addEventListener(\"touchstart\", handleUnfocused);\r\n            }\r\n            document.body.style.cursor = \"auto\";\r\n            window.removeEventListener(\"touchmove\", handleMove);\r\n            window.removeEventListener(\"touchend\", handleTouchEnd);\r\n        }\r\n\r\n        const handleUnfocused = (e: any) => {\r\n            let classes = e.target.className.split(' ');\r\n            if (!(classes[1] === \"TemporaryNumberInput\")) {\r\n                window.removeEventListener(\"touchstart\", handleUnfocused);\r\n                this.setState({focused: false});\r\n            }\r\n        }\r\n\r\n        window.addEventListener(\"touchmove\", handleMove);\r\n        window.addEventListener(\"touchend\", handleTouchEnd);\r\n    }\r\n\r\n    handleChange = (e: any) => {\r\n        console.log(e.target.value)\r\n        this.props.segment.value = Number.parseFloat(e.target.value);\r\n        this.setState({fillPercentage: this.calculateFill()})\r\n    }\r\n\r\n    createSliderStyle() {\r\n        return {\r\n            position: \"absolute\",\r\n            marginTop: this.offsetTop,\r\n            marginLeft: this.offsetLeft,\r\n            top: this.topPosition,\r\n            height: this.height,\r\n            width: this.width,\r\n            borderRadius: this.height / 2,\r\n\r\n            backgroundColor: this.nodeStyle.segmentColor,\r\n            overflow: \"hidden\",\r\n\r\n\r\n            border: \"1px solid \" + this.nodeStyle.borderColor\r\n        } as React.CSSProperties;\r\n    }\r\n\r\n    createInnerSliderStyle() {\r\n        return {\r\n            position: \"absolute\",\r\n            top: 0,\r\n            let: 0,\r\n            margin: 0,\r\n            backgroundColor: this.nodeStyle.headerColor,\r\n            height: \"100%\",\r\n            width: this.state.fillPercentage * 100 + \"%\",\r\n\r\n            pointerEvents: \"none\"\r\n        } as React.CSSProperties;\r\n    }\r\n\r\n    createInputStyle() {\r\n        let dim = this.props.segment.parentDimensions;\r\n        return {\r\n            position: \"absolute\",\r\n            padding: 0,\r\n            border: 0,\r\n            paddingLeft: \"6px\",\r\n            paddingRight: \"6px\",\r\n            top: this.topPosition,\r\n            marginTop: this.offsetTop,\r\n            left: this.offsetLeft,\r\n            height: this.height,\r\n            width: this.width - 12,\r\n            borderRadius: dim.segmentHeight / 2,\r\n            backgroundColor: this.nodeStyle.segmentColor,\r\n\r\n            fontFamily: this.nodeStyle.fontFamily,\r\n            textAlign: \"center\",\r\n            fontWeight: this.nodeStyle.labelsFontWeight,\r\n            fontSize: this.segmentStyle.fontSizeToSegmentHeight * this.props.segment.parentDimensions.segmentHeight,\r\n            color: this.nodeStyle.textColor\r\n        } as React.CSSProperties;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {!this.state.focused ?\r\n                    <div>\r\n                        <div onMouseDown={this.handleMouseDown}\r\n                             onTouchStart={this.handleTouchDown}\r\n                             style={this.createSliderStyle()}>\r\n                            <div style={this.createInnerSliderStyle()}/>\r\n                        </div>\r\n                        <div style={this.createInputLabelStyle()}>\r\n                            {this.props.segment.label}\r\n                        </div>\r\n                        <div style={this.createOutputLabelStyle()}>\r\n                            {this.props.segment.value}\r\n                        </div>\r\n                    </div>\r\n                    :\r\n                    <input className={\"NumberSegment TemporaryNumberInput\"}\r\n                           onChange={this.handleChange} type={\"number\"}\r\n                           style={this.createInputStyle()}\r\n                           defaultValue={this.props.segment.value}\r\n                    />\r\n                }\r\n                {this.createPort()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class NumericSliderSegmentModel extends SegmentModel<number> {\r\n    private minValue: number;\r\n    private maxValue: number;\r\n    private precision: number;\r\n\r\n    constructor(label: string, value: number, portType: PortType, minValue: number, maxValue: number, decimalPlaces: number) {\r\n        super(label, value, portType);\r\n        this.minValue = minValue;\r\n        this.maxValue = maxValue;\r\n        this.precision = Math.pow(10, decimalPlaces);\r\n    }\r\n\r\n    createView(storage: NodeStorage, currentScale: NodeCanvasViewProperties): JSX.Element {\r\n        return <NumericSliderSegment key={this._index} segment={this} storage={storage} currentScale={currentScale}\r\n                                     maxValue={this.maxValue} minValue={this.minValue} precision={this.precision}/>;\r\n    }\r\n\r\n}\r\n\r\nexport default NumericSliderSegment;","import {NodeDimension, NodeModel} from \"../node-atomic/NodeModel\";\r\nimport {NodeValueFunction} from \"../node-atomic/NodeValueFunction\";\r\nimport \"../../image-manipulation/workers/CapBrightnessWorker\";\r\nimport {CapBrightnessImageWorker, CapBrightnessParams} from \"../../image-manipulation/workers/CapBrightnessWorker\";\r\nimport {OutputSegmentModel} from \"../node-atomic/segments/OutputSegment\";\r\nimport {InputSegmentModel} from \"../node-atomic/segments/InputSegment\";\r\nimport {PortType} from \"../node-atomic/Segment\";\r\nimport {OptionSegmentModel} from \"../node-atomic/segments/OptionSegment\";\r\nimport {ImageLikeData} from \"../../image-manipulation/structs/ImageLikeData\";\r\nimport {NodeFactoryFunction} from \"./utils/NodeFactory\";\r\nimport {NodeSave} from \"./utils/NodeSave\";\r\nimport {NumericSliderSegmentModel} from \"../node-atomic/segments/NumericSliderSegment\";\r\n\r\nexport const CreateClampImageNode = (id: number, x?: number, y?: number): NodeModel => {\r\n    let node = new NodeModel(id, \"Cap Brightness\", x ? x : 0, y ? y : 0,\r\n        new NodeDimension(180, 22, 26, 20), new ClampImageNodeVFun());\r\n    node.addSegment(new OutputSegmentModel(\"image\"));\r\n    node.addSegment(new OptionSegmentModel(\"Cap at\", \"Max\", [\"Max\", \"Min\"]))\r\n    node.addSegment(new NumericSliderSegmentModel(\"value\", 255, PortType.INPUT, 0, 255,0));\r\n    node.addSegment(new InputSegmentModel(\"image\"));\r\n\r\n    return node;\r\n}\r\n\r\nexport class CapBrightnessNodeSave extends NodeSave {\r\n    public readonly capAt: \"Max\" | \"Min\";\r\n    public readonly value: number;\r\n\r\n    constructor(nodeModel: NodeModel, nodeDefaultDim: NodeDimension) {\r\n        super(nodeModel, nodeDefaultDim);\r\n        this.capAt = nodeModel.segments[1].value;\r\n        this.value = nodeModel.segments[2].value;\r\n    }\r\n}\r\n\r\nexport class CapBrightnessNFF implements NodeFactoryFunction<CapBrightnessNodeSave> {\r\n    public readonly nodeName: string = \"Cap brightness\";\r\n    public readonly defaultDimensions = new NodeDimension(180, 22, 26, 20);\r\n\r\n    createNewNode(id: number, x?: number, y?: number): NodeModel {\r\n        let node = new NodeModel(id, this.nodeName, x ? x : 0, y ? y : 0,\r\n            this.defaultDimensions, new ClampImageNodeVFun());\r\n        node.addSegment(new OutputSegmentModel(\"image\"));\r\n        node.addSegment(new OptionSegmentModel(\"Cap at\", \"Max\", [\"Max\", \"Min\"]))\r\n        node.addSegment(new NumericSliderSegmentModel(\"value\", 255,\r\n            PortType.INPUT, 0, 255,0));\r\n        node.addSegment(new InputSegmentModel(\"image\"));\r\n\r\n        return node;\r\n    }\r\n\r\n    loadNode(id: number, save: CapBrightnessNodeSave): NodeModel {\r\n        let node = new NodeModel(id, this.nodeName, save.x, save.y,\r\n            save.nodeDimensions ? save.nodeDimensions : this.defaultDimensions,\r\n            new ClampImageNodeVFun());\r\n        node.addSegment(new OutputSegmentModel(\"image\"));\r\n        node.addSegment(new OptionSegmentModel(\"Cap at\", save.capAt, [\"Max\", \"Min\"]))\r\n        node.addSegment(new NumericSliderSegmentModel(\"value\", 255,\r\n            PortType.INPUT, 0, 255,0));\r\n        node.addSegment(new InputSegmentModel(\"image\"));\r\n\r\n        return node;\r\n    }\r\n\r\n    createNodeSave(nodeModel: NodeModel): CapBrightnessNodeSave {\r\n        return new CapBrightnessNodeSave(nodeModel, this.defaultDimensions);\r\n    }\r\n}\r\n\r\nexport class ClampImageNodeVFun implements NodeValueFunction<ImageLikeData> {\r\n    private imageWorker = new CapBrightnessImageWorker(new CapBrightnessParams(255, true));\r\n\r\n    async getNodeValue(node: NodeModel, segmentIndex: number): Promise<ImageLikeData> {\r\n        let imgSource = node.getSegmentLinks(3)[0].outputSegment;\r\n        let sourcePromise = imgSource.parent.getNodeValue(imgSource.index)\r\n        let value = await sourcePromise;\r\n        if (!(value instanceof ImageLikeData)) {\r\n            return Promise.reject(\"input value has to be of ImageLikeData\");\r\n        }\r\n\r\n        let cap = node.segments[2].value;\r\n        this.imageWorker.setParams(new CapBrightnessParams(cap < 0 ? 0 : cap > 255 ? 255 : cap, node.segments[1].value === \"Max\"));\r\n        return this.imageWorker.run(value);\r\n    }\r\n}","import {ImageLikeData} from \"../structs/ImageLikeData\";\r\nimport {ImageWorker} from \"../ImageWorker\";\r\nimport WorkerLoader from \"../WorkerLoader\";\r\n\r\nconst ContrastWorker = () => {\r\n\r\n    self.addEventListener // eslint-disable-line no-restricted-globals\r\n        (\"message\", (message: MessageEvent<{ imageData: Uint8ClampedArray, contrast: number }>) => {\r\n            let data: Uint8ClampedArray = message.data.imageData;\r\n            let contrast: number = message.data.contrast;\r\n            let contrastFactor: number = (259 * (contrast + 255)) / (255 * (259 - contrast));\r\n            console.log(contrast);\r\n            console.log(contrastFactor);\r\n\r\n            let length = data.length;\r\n            let temp: number;\r\n\r\n            //red\r\n            for (let i = 0; i < length; i += 4) {\r\n                temp = contrastFactor * (data[i] - 128) + 128\r\n                data[i] = Math.floor(temp > 255 ? 255 : temp > 0 ? temp : 0);\r\n            }\r\n\r\n            //green\r\n            for (let i = 1; i < length; i += 4) {\r\n                temp = contrastFactor * (data[i] - 128) + 128\r\n                data[i] = Math.floor(temp > 255 ? 255 : temp > 0 ? temp : 0);\r\n            }\r\n\r\n            //blue\r\n            for (let i = 2; i < length; i += 4) {\r\n                temp = contrastFactor * (data[i] - 128) + 128\r\n                data[i] = Math.floor(temp > 255 ? 255 : temp > 0 ? temp : 0);\r\n            }\r\n\r\n\r\n            // @ts-ignore\r\n            postMessage(data, [data.buffer]);\r\n        });\r\n}\r\n\r\nexport default ContrastWorker;\r\n\r\nexport class ContrastImageWorker implements ImageWorker<ImageLikeData, number, ImageLikeData> {\r\n    private worker = WorkerLoader(ContrastWorker);\r\n    private _isBusy = false;\r\n    private contrast: number = 0;\r\n\r\n    isBusy(): boolean {\r\n        return this._isBusy;\r\n    }\r\n\r\n    run(inputData: ImageLikeData): Promise<ImageLikeData> {\r\n        if (this._isBusy) {\r\n            throw new Error(\"Worker is busy\");\r\n        }\r\n\r\n        return new Promise<ImageLikeData>((resolve, reject) => {\r\n            this.worker.onmessage = (message: MessageEvent<Uint8ClampedArray>) => {\r\n                inputData.data = message.data;\r\n                resolve(inputData);\r\n            }\r\n\r\n            this.worker.postMessage(this.createMessage(inputData), [inputData.data.buffer]);\r\n        });\r\n    }\r\n\r\n    private createMessage(data: ImageLikeData) {\r\n        return {imageData: data.data, hasAlpha: data.numberOfChannels === 4, contrast: this.contrast * 255}\r\n    }\r\n\r\n    setParams(parameters: number): void {\r\n        this.contrast = parameters;\r\n    }\r\n\r\n    getParams(): number {\r\n        return this.contrast;\r\n    }\r\n\r\n}","import {NodeDimension, NodeModel} from \"../node-atomic/NodeModel\";\r\nimport {CreateNode, NodeFactoryFunction} from \"./utils/NodeFactory\";\r\nimport {NodeValueFunction} from \"../node-atomic/NodeValueFunction\";\r\nimport {ImageLikeData} from \"../../image-manipulation/structs/ImageLikeData\";\r\nimport {OutputSegmentModel} from \"../node-atomic/segments/OutputSegment\";\r\nimport {NumericSliderSegmentModel} from \"../node-atomic/segments/NumericSliderSegment\";\r\nimport {PortType} from \"../node-atomic/Segment\";\r\nimport {InputSegmentModel} from \"../node-atomic/segments/InputSegment\";\r\nimport \"../../image-manipulation/workers/ContrastWorker\";\r\nimport {ContrastImageWorker} from \"../../image-manipulation/workers/ContrastWorker\";\r\nimport {NodeSave} from \"./utils/NodeSave\";\r\n\r\nexport const CreateContrastNode: CreateNode = (id: number, x?: number, y?: number): NodeModel => {\r\n    let node = new NodeModel(id, \"Contrast\", x ? x : 0, y ? y : 0,\r\n        new NodeDimension(155, 20, 26, 20),\r\n        new ContrastNodeVFun());\r\n    node.addSegment(new OutputSegmentModel(\"image\"));\r\n    node.addSegment(new NumericSliderSegmentModel(\"Contrast\", 0, PortType.INPUT, -1, 1, 2));\r\n    node.addSegment(new InputSegmentModel(\"image/channel\"));\r\n\r\n    return node;\r\n}\r\n\r\nexport class ContrastNodeSave extends NodeSave {\r\n    public readonly contrast: number;\r\n\r\n    constructor(nodeModel: NodeModel, nodeDefaultDim: NodeDimension) {\r\n        super(nodeModel, nodeDefaultDim);\r\n        this.contrast = nodeModel.segments[1].value;\r\n    }\r\n}\r\n\r\nexport class ContrastNFF implements NodeFactoryFunction<ContrastNodeSave> {\r\n    readonly nodeName: string = \"Contrast\";\r\n    public readonly defaultDimensions = new NodeDimension(155, 20, 26, 20);\r\n\r\n    createNewNode(id: number, x?: number, y?: number): NodeModel {\r\n        let node = new NodeModel(id, \"Contrast\", x ? x : 0, y ? y : 0,\r\n            this.defaultDimensions,\r\n            new ContrastNodeVFun());\r\n        node.addSegment(new OutputSegmentModel(\"image\"));\r\n        node.addSegment(new NumericSliderSegmentModel(\"Contrast\", 0, PortType.INPUT, -1, 1, 2));\r\n        node.addSegment(new InputSegmentModel(\"image/channel\"));\r\n\r\n        return node;\r\n    }\r\n\r\n    loadNode(id: number, save: ContrastNodeSave): NodeModel {\r\n        let node = new NodeModel(id, \"Contrast\", 0, 0,\r\n            save.nodeDimensions ? save.nodeDimensions : this.defaultDimensions,\r\n            new ContrastNodeVFun());\r\n        node.addSegment(new OutputSegmentModel(\"image\"));\r\n        node.addSegment(new NumericSliderSegmentModel(\"Contrast\", 0, PortType.INPUT, -1, 1, 2));\r\n        node.addSegment(new InputSegmentModel(\"image/channel\"));\r\n\r\n        return node;\r\n    }\r\n\r\n    createNodeSave(nodeModel: NodeModel): ContrastNodeSave {\r\n        return new ContrastNodeSave(nodeModel, this.defaultDimensions);\r\n    }\r\n}\r\n\r\nexport class ContrastNodeVFun implements NodeValueFunction<ImageLikeData> {\r\n    private imageWorker = new ContrastImageWorker();\r\n\r\n    async getNodeValue(node: NodeModel, segmentIndex: number): Promise<ImageLikeData> {\r\n        let inputImg: any;\r\n        try {\r\n            let imageSrc = node.getSegmentLinks(2)[0].outputSegment;\r\n            inputImg = await imageSrc.parent.getNodeValue(imageSrc.index);\r\n        } catch (e: any) {\r\n            return Promise.reject(\"No input\");\r\n        }\r\n\r\n        if (inputImg instanceof ImageLikeData) {\r\n            this.imageWorker.setParams(node.segments[1].value);\r\n            return this.imageWorker.run(inputImg);\r\n        } else {\r\n            return Promise.reject(\"Input data is not image like data\");\r\n        }\r\n    }\r\n\r\n}","import {InputSegmentModel} from \"../node-atomic/segments/InputSegment\";\r\nimport {NodeValueFunction} from \"../node-atomic/NodeValueFunction\";\r\nimport {NodeDimension, NodeModel} from \"../node-atomic/NodeModel\";\r\nimport {ImageLikeData} from \"../../image-manipulation/structs/ImageLikeData\";\r\nimport {NodeFactoryFunction} from \"./utils/NodeFactory\";\r\nimport {NodeSave} from \"./utils/NodeSave\";\r\n\r\nexport const CreateOutputNode = (id: number, x?: number, y?: number): NodeModel => {\r\n    let node = new NodeModel(id, \"Output\", x ? x : 0, y ? y : 0,\r\n        new NodeDimension(130, 20, 26, 20),\r\n        new OutputNodeVFun());\r\n    node.addSegment(new InputSegmentModel(\"image output\"));\r\n    return node;\r\n}\r\n\r\nexport class OutputNFF implements NodeFactoryFunction<NodeSave> {\r\n    public readonly nodeName: string = \"Output\";\r\n    public readonly defaultDimensions = new NodeDimension(130, 20, 26, 20);\r\n\r\n    createNewNode(id: number, x?: number, y?: number): NodeModel {\r\n        let node = new NodeModel(id, \"Output\", x ? x : 0, y ? y : 0,\r\n            this.defaultDimensions.clone(),\r\n            new OutputNodeVFun());\r\n        node.addSegment(new InputSegmentModel(\"image output\"));\r\n        return node;\r\n    }\r\n\r\n    loadNode(id: number, save: NodeSave): NodeModel {\r\n        let node = new NodeModel(id, \"Output\", save.x, save.y,\r\n            save.nodeDimensions ? save.nodeDimensions : this.defaultDimensions,\r\n            new OutputNodeVFun());\r\n        node.addSegment(new InputSegmentModel(\"image output\"));\r\n        return node;\r\n    }\r\n\r\n    createNodeSave(nodeModel: NodeModel): NodeSave {\r\n        return new NodeSave(nodeModel, this.defaultDimensions);\r\n    }\r\n}\r\n\r\nexport class OutputNodeVFun implements NodeValueFunction<ImageData> {\r\n\r\n    getNodeValue(node: NodeModel, segmentIndex: number): Promise<ImageData> {\r\n        return new Promise<ImageData>(((resolve, reject) => {\r\n            try {\r\n                let inputLink = node.getSegmentLinks(0)[0].outputSegment;\r\n                let inputPromise = inputLink.parent.getNodeValue(inputLink.index);\r\n                inputPromise.then(\r\n                    value => {\r\n                        if (value instanceof ImageData) {\r\n                            resolve(value)\r\n                        } else if (value instanceof ImageLikeData) {\r\n                            //TODO more checking should be done here\r\n                            let image = new ImageData(value.data, value.width, value.height);\r\n                            resolve(image);\r\n                        } else {\r\n                            reject(\"\");\r\n                        }\r\n                    }\r\n                );\r\n            } catch (e: any) {\r\n                reject(e);\r\n            }\r\n        }))\r\n\r\n    }\r\n}\r\n","export class FileToLoad {\r\n    public readonly fileName: string;\r\n    public readonly fileSize: number;\r\n    public readonly type: string;\r\n    public file: File | null = null;\r\n\r\n    constructor(fileName: string, fileSize: number, type: string) {\r\n        this.fileName = fileName;\r\n        this.fileSize = fileSize;\r\n        this.type = type;\r\n    }\r\n}","import React from 'react';\r\nimport Segment, {PortType, SegmentModel, SegmentProps} from \"../Segment\";\r\nimport \"./ImageSegment.css\"\r\nimport {NodeStorage} from \"../../NodeStorage\";\r\nimport {NodeCanvasViewProperties} from \"../../NodeCanvasViewProperties\";\r\nimport {FileToLoad} from \"../../nodes/utils/FileToLoad\";\r\n\r\nexport class ImageSegmentState {\r\n    public file: File | null = null;\r\n    public imgSrc: string | null = null;\r\n}\r\n\r\nexport class ImageSegment extends Segment<ImageData | null, SegmentProps<ImageData | null>, ImageSegmentState> {\r\n    constructor(props: SegmentProps<ImageData | null>) {\r\n        super(props);\r\n        this.state = new ImageSegmentState();\r\n        let segment = this.props.segment;\r\n\r\n        if (segment instanceof ImageSegmentModel && segment.file !== null) {\r\n            this.setState({file: segment.file});\r\n            this.loadFile(segment.file);\r\n        }\r\n    }\r\n\r\n    loadFile = (file: File) => {\r\n        let reader = new FileReader();\r\n        reader.onload = () => {\r\n            let img = new Image();\r\n            img.onload = () => {\r\n                this.setState({imgSrc: img.src});\r\n                let canvas = document.createElement(\"canvas\");\r\n                canvas.height = img.height;\r\n                canvas.width = img.width;\r\n                let ctx = canvas.getContext(\"2d\");\r\n                if (ctx !== null) {\r\n                    ctx.drawImage(img, 0, 0);\r\n                    this.props.segment.value = ctx.getImageData(0, 0, img.width, img.height);\r\n                }\r\n            }\r\n            if (typeof reader.result === \"string\") {\r\n                img.src = reader.result;\r\n            }\r\n        }\r\n        reader.readAsDataURL(file);\r\n    }\r\n\r\n    handleValueChange = (event: any) => {\r\n        try {\r\n            let file = event.target.files[0];\r\n            let segment = this.props.segment;\r\n            if (segment instanceof ImageSegmentModel) {\r\n                segment.fileToLoad = new FileToLoad(file.name, file.size, file.type);\r\n                segment.file = file;\r\n            }\r\n            console.log(file);\r\n            this.loadFile(file);\r\n        } catch (e) {\r\n            this.setState({imgSrc: null});\r\n        }\r\n        this.setState({file: event.target.files[0]});\r\n    }\r\n\r\n    createInputStyle() {\r\n        let dim = this.props.segment.parentDimensions;\r\n        return {\r\n            position: \"absolute\",\r\n            top: this.topPosition,\r\n            paddingRight: \"6px\",\r\n            width: dim.width * (1 - 2 * this.segmentStyle.percentageOffsetLeft) - 6,\r\n            height: dim.segmentHeight * (1 - 2 * this.segmentStyle.percentageOffsetTop),\r\n            marginLeft: dim.width * this.segmentStyle.percentageOffsetLeft,\r\n            marginTop: dim.segmentHeight * this.segmentStyle.percentageOffsetTop,\r\n\r\n            color: this.nodeStyle.textColor,\r\n            fontWeight: this.nodeStyle.labelsFontWeight,\r\n            fontSize: dim.segmentHeight * this.segmentStyle.fontSizeToSegmentHeight,\r\n            userSelect: \"none\"\r\n        } as React.CSSProperties;\r\n    }\r\n\r\n    createLabelStyle() {\r\n        let dim = this.props.segment.parentDimensions;\r\n        return {\r\n            position: \"absolute\",\r\n            top: this.topPosition,\r\n            width: dim.width * (1 - 2 * this.segmentStyle.percentageOffsetLeft) - 6,\r\n            height: dim.segmentHeight * (1 - this.segmentStyle.percentageOffsetTop),\r\n            paddingLeft: \"6px\",\r\n            borderRadius: dim.segmentHeight / 2,\r\n            backgroundColor: this.nodeStyle.segmentColor,\r\n            marginLeft: dim.width * this.segmentStyle.percentageOffsetLeft,\r\n            marginTop: dim.segmentHeight * this.segmentStyle.percentageOffsetTop,\r\n            overflow: \"hidden\",\r\n\r\n            textAlign: \"left\",\r\n            whiteSpace: \"nowrap\",\r\n            color: this.nodeStyle.textColor,\r\n            fontWeight: this.nodeStyle.labelsFontWeight,\r\n            fontSize: dim.segmentHeight * this.segmentStyle.fontSizeToSegmentHeight\r\n        } as React.CSSProperties\r\n    }\r\n\r\n    createCanvasStyle() {\r\n        let dim = this.props.segment.parentDimensions;\r\n        return {\r\n            position: \"absolute\",\r\n            top: this.topPosition + dim.segmentHeight,\r\n            marginTop: this.offsetTop,\r\n            height: dim.segmentHeight * 2 * (1 - this.segmentStyle.percentageOffsetTop),\r\n            width: this.width\r\n        } as React.CSSProperties;\r\n    }\r\n\r\n    render() {\r\n        let dim = this.props.segment.parentDimensions;\r\n        return (\r\n            <div>\r\n                <input onChange={this.handleValueChange} className={\"fileInput\"} type=\"file\" accept=\"image/*\"\r\n                       style={this.createInputStyle()}/>\r\n                <label className={\"fileLabel\"} style={this.createLabelStyle()}>\r\n                    🖿 {(this.state.file === null || this.state.file === undefined) ?\r\n                    this.props.segment.label : this.state.file.name}\r\n                </label>\r\n\r\n                {this.createPort()}\r\n\r\n                {this.state.imgSrc !== null ?\r\n                    <div style={{\r\n                        position: \"absolute\",\r\n                        top: this.topPosition + dim.segmentHeight + this.offsetTop,\r\n                        left: this.offsetLeft,\r\n                        width: this.width,\r\n                        height: dim.segmentHeight * (4 - 2 * this.segmentStyle.percentageOffsetTop),\r\n                        pointerEvents: \"none\",\r\n                        borderRadius: this.height / 2\r\n                    }}>\r\n                        <img style={{\r\n                            margin: \"2px\",\r\n                            maxWidth: this.width - 4,\r\n                            maxHeight: dim.segmentHeight * (4 - 2 * this.segmentStyle.percentageOffsetTop) - 4,\r\n                            display: \"block\",\r\n                            marginLeft: \"auto\",\r\n                            marginRight: \"auto\",\r\n                            marginTop: \"auto\",\r\n                            marginBottom: \"auto\",\r\n                            borderRadius: this.height / 2\r\n                        }} src={this.state.imgSrc}/>\r\n                    </div>\r\n                    :\r\n                    <div/>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class ImageSegmentModel extends SegmentModel<ImageData | null> {\r\n    private _fileToLoad: FileToLoad = new FileToLoad(\"\", 0, \"\");\r\n\r\n    constructor(label: string, value: ImageData | null, portType: PortType) {\r\n        super(label, value, portType, 5);\r\n    }\r\n\r\n    createView(storage: NodeStorage, currentScale: NodeCanvasViewProperties): JSX.Element {\r\n        return <ImageSegment currentScale={currentScale} storage={storage} segment={this} key={this.index}/>;\r\n    }\r\n\r\n\r\n    get fileToLoad(): FileToLoad {\r\n        return this._fileToLoad;\r\n    }\r\n\r\n    set fileToLoad(value: FileToLoad) {\r\n        this._fileToLoad = value;\r\n    }\r\n\r\n    get file(): File | null {\r\n        return this._fileToLoad.file;\r\n    }\r\n\r\n    set file(value: File | null) {\r\n        this._fileToLoad.file = value;\r\n    }\r\n}","import {OutputSegmentModel} from \"../node-atomic/segments/OutputSegment\";\r\nimport {ImageSegmentModel} from \"../node-atomic/segments/ImageSegment\";\r\nimport {PortType} from \"../node-atomic/Segment\";\r\nimport {NodeValueFunction} from \"../node-atomic/NodeValueFunction\";\r\nimport {NodeDimension, NodeModel} from \"../node-atomic/NodeModel\";\r\nimport {ImageLikeData} from \"../../image-manipulation/structs/ImageLikeData\";\r\nimport {NodeFactoryFunction} from \"./utils/NodeFactory\";\r\nimport {NodeSave} from \"./utils/NodeSave\";\r\n\r\nexport const CreateImageInputNode = (id: number, x?: number, y?: number): NodeModel => {\r\n    let node = new NodeModel(id, \"Image input\", x ? x : 0, y ? y : 0,\r\n        new NodeDimension(180, 20, 26, 0),\r\n        new ImageInputNodeVFun());\r\n    node.addSegment(new OutputSegmentModel(\"image\"));\r\n    node.addSegment(new ImageSegmentModel(\"Load input image\", null, PortType.NO_PORT))\r\n    return node;\r\n}\r\n\r\nexport class ImageInputNodeSave extends NodeSave {\r\n\r\n    constructor(nodeModel: NodeModel, nodeDefaultDim: NodeDimension) {\r\n        super(nodeModel, nodeDefaultDim);\r\n        let imageSegment = nodeModel.segments[1];\r\n        if (imageSegment instanceof ImageSegmentModel) {\r\n            this.fileToLoadList[0] = imageSegment.fileToLoad;\r\n        } else {\r\n            throw Error();\r\n        }\r\n    }\r\n}\r\n\r\nexport class ImageInputNFF implements NodeFactoryFunction<ImageInputNodeSave> {\r\n    public readonly nodeName: string = \"Image input\";\r\n    public readonly defaultDimensions = new NodeDimension(180, 20, 26, 0);\r\n\r\n    createNewNode(id: number, x?: number, y?: number): NodeModel {\r\n        let node = new NodeModel(id, this.nodeName, x ? x : 0, y ? y : 0,\r\n            this.defaultDimensions,\r\n            new ImageInputNodeVFun());\r\n        node.addSegment(new OutputSegmentModel(\"image\"));\r\n        node.addSegment(new ImageSegmentModel(\"Load input image\", null, PortType.NO_PORT));\r\n        return node;\r\n    }\r\n\r\n    loadNode(id: number, save: ImageInputNodeSave): NodeModel {\r\n        let node = new NodeModel(id, this.nodeName, save.x, save.y,\r\n            save.nodeDimensions ? save.nodeDimensions : this.defaultDimensions,\r\n            new ImageInputNodeVFun());\r\n        node.addSegment(new OutputSegmentModel(\"image\"));\r\n        node.addSegment(new ImageSegmentModel(\"Load input image\", null, PortType.NO_PORT));\r\n        return node;\r\n    }\r\n\r\n    createNodeSave(nodeModel: NodeModel): ImageInputNodeSave {\r\n        return new ImageInputNodeSave(nodeModel, this.defaultDimensions);\r\n    }\r\n}\r\n\r\nexport class ImageInputNodeVFun implements NodeValueFunction<ImageLikeData> {\r\n\r\n    getNodeValue(node: NodeModel, segmentIndex: number): Promise<ImageLikeData> {\r\n        if (node.segments[1].value instanceof ImageData) {\r\n            return new Promise(\r\n                resolve => {\r\n                    let imageData: ImageData = node.segments[1].value;\r\n                    let dataCopy = new ImageLikeData(new Uint8ClampedArray(imageData.data), imageData.width, imageData.height);\r\n                    resolve(dataCopy);\r\n                }\r\n            );\r\n        } else {\r\n            return Promise.reject(\"Image not loaded\");\r\n        }\r\n    }\r\n}\r\n","import {NodeDimension, NodeModel} from \"../../node-atomic/NodeModel\";\r\nimport {NodeSave} from \"./NodeSave\";\r\nimport {CapBrightnessNFF} from \"../CapBrightnessNode\";\r\nimport {ContrastNFF} from \"../ContrastNode\";\r\nimport {OutputNFF} from \"../OutputNode\";\r\nimport {ImageInputNFF} from \"../ImageInputNode\";\r\n\r\nexport interface CreateNode {\r\n    (id: number, x?: number, y?: number): NodeModel;\r\n}\r\n\r\nexport class CompleteNode {\r\n    name: string;\r\n    createNode: CreateNode;\r\n\r\n\r\n    constructor(name: string, createNode: CreateNode) {\r\n        this.name = name;\r\n        this.createNode = createNode;\r\n    }\r\n}\r\n\r\nexport interface NodeFactoryFunction<Save extends NodeSave> {\r\n    readonly nodeName: string;\r\n    readonly defaultDimensions: NodeDimension;\r\n\r\n    createNewNode(id: number, x?: number, y?: number): NodeModel;\r\n\r\n    loadNode(id: number, save: Save): NodeModel;\r\n\r\n    createNodeSave(nodeModel: NodeModel): Save;\r\n}\r\n\r\nexport const NodeFactory = (nodeName: string): NodeFactoryFunction<any> => {\r\n    let nodeFactoryFun = NodeFactoryFunctionMap.get(nodeName);\r\n    if (nodeFactoryFun) {\r\n        return nodeFactoryFun;\r\n    } else {\r\n        throw new Error();\r\n    }\r\n}\r\n\r\nexport const NodeFactoryFunctionMap = new Map<string, NodeFactoryFunction<any>>();\r\nconst addNFF = (...nFFs: NodeFactoryFunction<any>[]) => {\r\n    nFFs.forEach(nFF =>\r\n        NodeFactoryFunctionMap.set(nFF.nodeName, nFF)\r\n    )\r\n}\r\naddNFF(\r\n    new CapBrightnessNFF(),\r\n    new ContrastNFF(),\r\n    new OutputNFF(),\r\n    new ImageInputNFF()\r\n);\r\n\r\n","import React, {PureComponent} from 'react';\r\nimport {mainColors} from \"../App\";\r\nimport \"./NodeControlPanel.css\"\r\nimport {Button, ButtonContent} from \"../components/Button\";\r\nimport {UnfoldingButton} from \"../components/UnfoldingButton\";\r\nimport {NodeStorage} from \"./NodeStorage\";\r\nimport {NodeCanvasViewProperties} from \"./NodeCanvasViewProperties\";\r\nimport {NodeFactoryFunction, NodeFactoryFunctionMap} from \"./nodes/utils/NodeFactory\";\r\n\r\nexport class NodeControlPanel extends PureComponent<{ storage: NodeStorage, viewProps: NodeCanvasViewProperties }, any> {\r\n    private ref = React.createRef<HTMLDivElement>();\r\n    protected buttonsContent: ButtonContent[];\r\n\r\n\r\n    constructor(props: { storage: NodeStorage; viewProps: NodeCanvasViewProperties }) {\r\n        super(props);\r\n        this.buttonsContent = this.createButtonProps()\r\n    }\r\n\r\n    createBreakElement(): JSX.Element {\r\n        return <div style={{\r\n            borderLeft: \"2px dotted \" + mainColors.headerColor, height: \"85%\",\r\n            marginTop: \"auto\", marginBottom: \"auto\", marginLeft: \"2px\", marginRight: 0, padding: 0, width: 0\r\n        }}/>\r\n    }\r\n\r\n    createAddNodeEvent = (nodeCreateFunction: NodeFactoryFunction<any>) => {\r\n        return (event: any) => {\r\n            if (!this.ref.current) {\r\n                throw new Error();\r\n            }\r\n            let storage = this.props.storage;\r\n            let newNode = nodeCreateFunction.createNewNode(storage.getNextNodeId());\r\n            let panelBox = this.ref.current.getBoundingClientRect();\r\n\r\n            let viewProps = this.props.viewProps\r\n            let nodeX = (event.clientX - panelBox.left - viewProps.width / 2) / viewProps.scale - viewProps.shiftLeft - newNode.dimensions.width / 2;\r\n            let nodeY = (event.clientY - (panelBox.top + panelBox.height) - viewProps.height / 2) / viewProps.scale - viewProps.shiftTop - newNode.dimensions.headHeight / 2;\r\n\r\n            newNode.x = nodeX;\r\n            newNode.y = nodeY;\r\n            storage.handleAddNode(newNode);\r\n            document.body.style.cursor = \"auto\";\r\n        }\r\n    }\r\n\r\n    createButtonProps = (): ButtonContent[] => {\r\n        let buttonPropsList: ButtonContent[] = [];\r\n        NodeFactoryFunctionMap.forEach(\r\n            nodeFF => buttonPropsList.push(new ButtonContent(nodeFF.nodeName, this.createAddNodeEvent(nodeFF)))\r\n        );\r\n        return buttonPropsList;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div ref={this.ref} style={{\r\n                position: \"absolute\",\r\n                top: 0,\r\n                left: 0,\r\n                width: \"98.5%\",\r\n                height: \"100%\",\r\n                display: \"flex\",\r\n                alignItems: \"flex-start\",\r\n                paddingLeft: \"1.5%\",\r\n                backgroundColor: mainColors.segmentColor,\r\n                fontWeight: 400,\r\n                boxShadow: \"0 3px 3px 1px \" + mainColors.borderColor,\r\n                zIndex: 1000\r\n            }}>\r\n\r\n                {this.createBreakElement()}\r\n\r\n                <UnfoldingButton label={\"Add new node\"}\r\n                                 unfocusedOnClick={true}\r\n                                 subButtonsContent={this.createButtonProps()}/>\r\n\r\n                {this.createBreakElement()}\r\n\r\n                <Button label={\"label\"} onClick={(event) => console.log(event)}/>\r\n\r\n                {this.createBreakElement()}\r\n\r\n                <Button label={\"label\"} onClick={(event) => console.log(event)}/>\r\n\r\n                {this.createBreakElement()}\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default NodeControlPanel;","import {PortType, SegmentModel} from \"./node-atomic/Segment\";\r\nimport {LinkModel} from \"./node-atomic/Link\";\r\nimport {NodeModel} from \"./node-atomic/NodeModel\";\r\n\r\nexport interface NodeStorageListener {\r\n    (nodes: NodeModel[], links: LinkModel[]): void;\r\n}\r\n\r\nexport interface NodeStorage {\r\n\r\n    //this returns listenerId\r\n    addUpdateListener(listener: NodeStorageListener): number;\r\n\r\n    removeUpdateListener(listenerId: number): void;\r\n\r\n    handleAttemptToAddLink(outputSegment: SegmentModel<any>, targetX: number, targetY: number): LinkModel | null;\r\n\r\n    handleAddLink(link: LinkModel): void;\r\n\r\n    handleAddNode(node: NodeModel): void;\r\n\r\n    handleUpdateNode(node: NodeModel): void;\r\n\r\n    handleRemoveLink(link: LinkModel): void;\r\n\r\n    handleRemoveLinks(parent: SegmentModel<any>): void;\r\n\r\n    handleRemoveNode(node: NodeModel): void;\r\n\r\n    handleRemoveNode(nodeId: number): void;\r\n\r\n    getNextNodeId(): number;\r\n\r\n    getNodes(): NodeModel[];\r\n\r\n    getLinks(): LinkModel[];\r\n}\r\n\r\nexport class DefaultNodeStorage implements NodeStorage {\r\n    private nextNodeId = 0;\r\n    private links: LinkModel[];\r\n    private nodes: NodeModel[];\r\n    private readonly listeners: NodeStorageListener[];\r\n\r\n    constructor(nodes?: NodeModel[], links?: LinkModel[], listeners?: NodeStorageListener[]) {\r\n        if (nodes) {\r\n            this.nodes = nodes;\r\n            let biggestNodeId = 0;\r\n            nodes.forEach(n => biggestNodeId = biggestNodeId > n.id ? biggestNodeId : n.id);\r\n            this.nextNodeId = biggestNodeId + 1;\r\n        } else {\r\n            this.nodes = [];\r\n        }\r\n\r\n        if (links) {\r\n            this.links = links;\r\n            links.forEach(link => {\r\n                link.outputSegment.parent.addLink(link);\r\n                link.inputSegment.parent.addLink(link);\r\n            })\r\n        } else {\r\n            this.links = [];\r\n        }\r\n        this.listeners = listeners ? listeners : [];\r\n    }\r\n\r\n    getLinks(): LinkModel[] {\r\n        return this.links;\r\n    }\r\n\r\n    getNodes(): NodeModel[] {\r\n        return this.nodes;\r\n    }\r\n\r\n    addUpdateListener(listener: NodeStorageListener): number {\r\n        return this.listeners.push(listener);\r\n    }\r\n\r\n    removeUpdateListener(listenerId: number): void {\r\n        delete this.listeners[listenerId];\r\n    }\r\n\r\n    handleAddLink(link: LinkModel): void {\r\n        let newLinkList = [link];\r\n        this.links = newLinkList.concat(this.links);\r\n        this.callListeners();\r\n    }\r\n\r\n    handleAddNode(node: NodeModel): void {\r\n        if (node.id === this.nextNodeId) {\r\n            let newNodeList = [node];\r\n            this.nodes = newNodeList.concat(this.nodes);\r\n            this.nextNodeId++;\r\n            this.callListeners();\r\n        } else {\r\n            let nodeIdExist: boolean = false;\r\n            this.nodes.forEach(n => nodeIdExist = nodeIdExist ? nodeIdExist : n.id === node.id);\r\n            if (nodeIdExist) {\r\n                throw new Error(\"Can not add node with id with is already assigned\");\r\n            } else {\r\n                let newNodeList = [node];\r\n                this.nodes = newNodeList.concat(this.nodes);\r\n                this.nextNodeId = this.nextNodeId > node.id ? this.nextNodeId : node.id + 1;\r\n                this.callListeners();\r\n            }\r\n        }\r\n    }\r\n\r\n    handleAttemptToAddLink(outputSegment: SegmentModel<any>, targetX: number, targetY: number): LinkModel | null {\r\n        let inputSegment: SegmentModel<any> | null = null;\r\n        let nodes = this.nodes;\r\n        let i = 0;\r\n        while (i < nodes.length && inputSegment == null) {\r\n            for (let j = 0; j < nodes[i].segments.length; j++) {\r\n                if (nodes[i].segments[j].portType !== PortType.INPUT) {\r\n                    continue;\r\n                }\r\n                let portSize = nodes[i].dimensions.segmentHeight;\r\n                let xMin = nodes[i].segments[j].calcPortLeftOffsetToCenter() - portSize / 2;\r\n                let xMax = xMin + portSize;\r\n                let yMin = nodes[i].segments[j].calcPortTopOffsetToCenter() - portSize / 2;\r\n                let yMax = yMin + portSize;\r\n                if (targetX >= xMin && targetX <= xMax &&\r\n                    targetY >= yMin && targetY <= yMax) {\r\n                    inputSegment = nodes[i].segments[j];\r\n                    break;\r\n                }\r\n            }\r\n            i++;\r\n        }\r\n\r\n        if (inputSegment != null) {\r\n            this.handleRemoveLinks(inputSegment);\r\n            let newLink = new LinkModel(outputSegment, inputSegment);\r\n            outputSegment.parent.addLink(newLink);\r\n            inputSegment.parent.addLink(newLink);\r\n            this.links.push(newLink);\r\n\r\n            this.callListeners();\r\n            return newLink;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    handleRemoveLink(link: LinkModel): void {\r\n        let links = this.links.filter(e => e !== null);\r\n        for (let i = 0; i < links.length; i++) {\r\n            let l = links[i];\r\n            if (l.equals(link)) {\r\n                l.outputSegment.parent.removeLink(l);\r\n                l.inputSegment.parent.removeLink(l);\r\n                delete links[i];\r\n                break;\r\n            }\r\n        }\r\n        this.links = links.filter(l => l !== null && l !== undefined);\r\n        this.callListeners();\r\n    }\r\n\r\n    handleRemoveLinks(parent: SegmentModel<any>): void {\r\n        let links = this.links.filter(e => e !== null);\r\n        for (let i = 0; i < links.length; i++) {\r\n            let l = links[i];\r\n            if ((l.inputSegment.index === parent.index && l.inputSegment.parent.id === parent.parent.id) ||\r\n                (l.outputSegment.index === parent.index && l.outputSegment.parent.id === parent.parent.id)) {\r\n                l.outputSegment.parent.removeLink(l);\r\n                l.inputSegment.parent.removeLink(l);\r\n                delete links[i];\r\n            }\r\n        }\r\n        this.links = links.filter(l => l !== null && l !== undefined);\r\n        this.callListeners();\r\n    }\r\n\r\n    handleRemoveNode(node: NodeModel): void;\r\n    handleRemoveNode(nodeId: number): void;\r\n    handleRemoveNode(node: NodeModel | number): void {\r\n        let nodeId: number = 0;\r\n        if (typeof node == \"number\") {\r\n            nodeId = node;\r\n        } else {\r\n            nodeId = node.id;\r\n        }\r\n\r\n        for (let i = 0; i < this.nodes.length; i++) {\r\n            if (this.nodes[i].id === nodeId) {\r\n                this.removeLinks(this.nodes[i].links);\r\n                delete this.nodes[i];\r\n                break;\r\n            }\r\n        }\r\n        this.nodes = this.nodes.filter(n => n !== null && n !== undefined);\r\n        this.callListeners();\r\n    }\r\n\r\n    handleUpdateNode(updatedNode: NodeModel): void {\r\n        let nodes = this.nodes;\r\n        let nodeIndex = 0;\r\n        for (let i = 0; i < nodes.length; i++) {\r\n            if (nodes[i].id === updatedNode.id) {\r\n                nodeIndex = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (nodeIndex; nodeIndex < nodes.length - 1; nodeIndex++) {\r\n            nodes[nodeIndex] = nodes[nodeIndex + 1];\r\n        }\r\n        nodes[nodes.length - 1] = updatedNode;\r\n        this.callListeners();\r\n    }\r\n\r\n    getNextNodeId(): number {\r\n        return this.nextNodeId;\r\n    }\r\n\r\n    private callListeners() {\r\n        this.listeners.forEach(l => l(this.nodes, this.links));\r\n    }\r\n\r\n    private removeLinks(linksToRemove: LinkModel[]) {\r\n        let links = this.links;\r\n        let tempLink: LinkModel;\r\n        for (let i = 0; i < links.length; i++) {\r\n            tempLink = links[i];\r\n            for (let j = 0; j < linksToRemove.length; j++) {\r\n                if (linksToRemove[j] !== undefined && tempLink.equals(linksToRemove[j])) {\r\n                    tempLink.inputSegment.parent.removeLink(tempLink);\r\n                    tempLink.outputSegment.parent.removeLink(tempLink);\r\n                    delete links[i];\r\n                    delete linksToRemove[j];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        this.links = links.filter(l => l !== null && l != undefined);\r\n    }\r\n\r\n}","export class NodeCanvasViewProperties {\r\n    public scale: number;\r\n    public shiftTop: number;\r\n    public shiftLeft: number;\r\n    public width: number;\r\n    public height: number;\r\n\r\n    constructor(scale: number, shiftTop: number, shiftLeft: number, width: number, height: number) {\r\n        this.scale = scale;\r\n        this.shiftTop = shiftTop;\r\n        this.shiftLeft = shiftLeft;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport NodeCanvas from \"./NodeCanvas\";\r\nimport \"./NodeModule.css\";\r\nimport {LinkModel} from \"./node-atomic/Link\";\r\n\r\nimport RenderWindow from \"./RenderWindow\";\r\nimport NodeControlPanel from \"./NodeControlPanel\";\r\nimport {DefaultNodeStorage, NodeStorageListener} from \"./NodeStorage\";\r\nimport {NodeCanvasViewProperties} from \"./NodeCanvasViewProperties\";\r\nimport {NodeModel} from \"./node-atomic/NodeModel\";\r\nimport {mainColors} from \"../App\";\r\n\r\nexport interface NodeModuleProps {\r\n    nodes?: NodeModel[],\r\n    links?: LinkModel[],\r\n    disableControlPanel?: boolean\r\n}\r\n\r\nexport interface NodeModuleState {\r\n    nodes: NodeModel[];\r\n    links: LinkModel[];\r\n    dividerPosition: number;\r\n}\r\n\r\nexport class NodeModule extends Component<NodeModuleProps, NodeModuleState> {\r\n    private nodeCanvasViewProps: NodeCanvasViewProperties = new NodeCanvasViewProperties(1, 0, 0, 0, 0);\r\n    protected storageListener: NodeStorageListener = ((nodes, links) => this.setState({nodes: nodes, links: links}));\r\n    private readonly storage;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.storage = new DefaultNodeStorage(props.nodes ? props.nodes : [],\r\n            props.links ? props.links : [], [this.storageListener]);\r\n        this.state = {nodes: this.storage.getNodes(), links: this.storage.getLinks(), dividerPosition: 60};\r\n    }\r\n\r\n    handleResizeMouseDown = (event: any) => {\r\n        let parent = event.target.parentElement;\r\n        let parentBox = parent.getBoundingClientRect() as DOMRect;\r\n        const handleMouseMove = (event: any) => {\r\n            event.preventDefault();\r\n            let newPosition = (event.clientX - parentBox.left) / parentBox.width * 100;\r\n            this.setState({dividerPosition: newPosition > 100 ? 100 : newPosition > 0 ? newPosition : 0})\r\n        }\r\n        const handleMouseUp = (event: any) => {\r\n            window.removeEventListener(\"mousemove\", handleMouseMove);\r\n            window.removeEventListener(\"mouseup\", handleMouseUp);\r\n        }\r\n\r\n        window.addEventListener(\"mousemove\", handleMouseMove);\r\n        window.addEventListener(\"mouseup\", handleMouseUp);\r\n    }\r\n\r\n    handleResizeTouchStart = (event: any) => {\r\n        let parent = event.target.parentElement;\r\n        let parentBox = parent.getBoundingClientRect() as DOMRect;\r\n        const handleTouchMove = (event: any) => {\r\n            event.preventDefault();\r\n            let newPosition = (event.touches[0].screenX - parentBox.left) / parentBox.width * 100;\r\n            this.setState({dividerPosition: newPosition > 100 ? 100 : newPosition > 0 ? newPosition : 0})\r\n        }\r\n        const handleTouchEnd = (event: any) => {\r\n            window.removeEventListener(\"touchmove\", handleTouchMove);\r\n            window.removeEventListener(\"touchend\", handleTouchEnd);\r\n        }\r\n\r\n        window.addEventListener(\"touchmove\", handleTouchMove);\r\n        window.addEventListener(\"touchend\", handleTouchEnd);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{top: 0, height: \"100%\", width: \"100%\", position: \"relative\", left: 0}}>\r\n\r\n                {!this.props.disableControlPanel ?\r\n                    <div style={{position: \"absolute\", width: \"100%\", height: \"4.5%\"}}>\r\n                        <NodeControlPanel storage={this.storage} viewProps={this.nodeCanvasViewProps}/>\r\n                    </div>\r\n                    :\r\n                    <div style={{\r\n                        position: \"absolute\",\r\n                        width: \"100%\",\r\n                        height: \"4.5%\",\r\n                        backgroundColor: mainColors.segmentColor\r\n                    }}>\r\n                    </div>\r\n                }\r\n\r\n                <div style={{\r\n                    top: \"4.5%\",\r\n                    left: 0,\r\n                    height: \"95.5%\",\r\n                    width: this.state.dividerPosition + \"%\",\r\n                    position: \"absolute\"\r\n                }}>\r\n                    <NodeCanvas storage={this.storage} viewProps={this.nodeCanvasViewProps}/>\r\n                </div>\r\n\r\n                <div onMouseDown={this.handleResizeMouseDown}\r\n                     onTouchStart={this.handleResizeTouchStart}\r\n                     className={\"Separator\"} style={{\r\n                    height: \"95.5%\", width: \"10px\", top: \"4.5%\",\r\n                    left: this.state.dividerPosition < 50 ? `${this.state.dividerPosition}%` : `calc(${this.state.dividerPosition}% - 10px)`,\r\n                    position: \"absolute\", overflow: \"hidden\", margin: 0, padding: 0,\r\n                    backgroundColor: mainColors.segmentColor, boxShadow: \"0 0 2px 1px \" + mainColors.borderColor,\r\n\r\n                }}/>\r\n\r\n                <div style={{\r\n                    top: \"4.5%\",\r\n                    left: this.state.dividerPosition < 50 ? `calc(${this.state.dividerPosition}% + 10px)` : `${this.state.dividerPosition}%`,\r\n                    width: this.state.dividerPosition < 50 ? `calc(${100 - this.state.dividerPosition}% - 10px)` : `${100 - this.state.dividerPosition}%`,\r\n                    height: \"95.5%\",\r\n                    position: \"absolute\",\r\n                    overflow: \"hidden\",\r\n                    margin: 0,\r\n                    padding: 0\r\n                }}>\r\n                    <RenderWindow nodes={this.state.nodes}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NodeModule;\r\n","import React from 'react';\r\nimport \"./Navbar.css\"\r\nimport {mainColors} from \"../App\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport {Box, Link} from \"@chakra-ui/react\";\r\n\r\nconst toggleFullScreen = (event: any) => {\r\n    let toggleOn = document.fullscreenElement;\r\n    console.log(toggleOn);\r\n    if (!toggleOn) {\r\n        document.body.requestFullscreen();\r\n    } else {\r\n        console.log(\"quiting full screen\");\r\n        document.exitFullscreen();\r\n    }\r\n}\r\n\r\nconst Navbar: React.FunctionComponent = () => {\r\n    let onFullScreen: boolean = false;\r\n\r\n    return (\r\n        <Box position=\"absolute\" top={0} left={0} width=\"100%\" height=\"100%\" margin={0} padding={0}>\r\n\r\n            <div className={\"Navbar\"} style={{\r\n                position: \"absolute\", left: 0, top: 0,\r\n                width: \"100%\", height: \"100%\", margin: 0, padding: 0,\r\n                borderBottom: \"2px solid \" + mainColors.headerColor,\r\n                boxSizing: \"border-box\"\r\n            }}/>\r\n\r\n\r\n            <div style={{\r\n                position: \"absolute\", width: \"70%\", height: \"inherit\",\r\n                left: 0, top: 0, display: \"flex\", justifyContent: \"flex-start\", alignItems: \"center\",\r\n                fontWeight: 600, color: \"#fff\", fontSize: \"3.5vh\"\r\n            }}>\r\n\r\n                <NavbarLink label=\"Home\" to={\"/\"}/>\r\n\r\n                <NavbarLink label=\"Editor\" to=\"/editor\"/>\r\n\r\n                <NavbarLink label=\"Examples\" to=\"/examples\"/>\r\n\r\n\r\n            </div>\r\n\r\n            <div style={{\r\n                position: \"absolute\", width: \"30%\", height: \"inherit\",\r\n                left: \"70%\", top: 0, display: \"flex\", justifyContent: \"flex-end\", alignItems: \"center\",\r\n                fontWeight: 600, color: \"#fff\", fontSize: \"3.5vh\"\r\n            }}>\r\n                <Box bg=\"none\" _hover={{color: mainColors.headerColor, cursor: \"pointer\", transform: \"scale(1.2)\"}}\r\n                     onClick={toggleFullScreen} onTouchEnd={toggleFullScreen} transition=\"transform 0.3s 0s linear\"\r\n                     margin=\"15px\">\r\n                    ⤢\r\n                </Box>\r\n            </div>\r\n        </Box>\r\n    );\r\n\r\n}\r\n\r\ninterface NavbarLinkProps {\r\n    label: string;\r\n    to: string;\r\n}\r\n\r\nconst NavbarLink: React.FunctionComponent<NavbarLinkProps> = (props: NavbarLinkProps): JSX.Element => {\r\n    return (\r\n        <Link as={RouterLink} to={props.to} marginLeft=\"10px\">\r\n            {props.label}\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport {NodeModel} from \"../node-module/node-atomic/NodeModel\";\r\nimport {LinkModel} from \"../node-module/node-atomic/Link\";\r\nimport {Box, Flex, Heading, Text, VStack} from '@chakra-ui/react';\r\nimport NodeModule from \"../node-module/NodeModule\";\r\nimport {mainColors} from \"../App\";\r\n\r\nexport interface ExampleProps {\r\n    name: string,\r\n    description: string,\r\n    nodeModels: NodeModel[],\r\n    linkModels: LinkModel[]\r\n}\r\n\r\nconst Example = (props: ExampleProps) => {\r\n    return (\r\n        <VStack width=\"100%\" height=\"100%\">\r\n            <Flex width=\"80%\" h=\"16.5%\" justify=\"center\" align=\"center\" direction=\"column\" overflow=\"auto\">\r\n                <Heading as=\"h2\" size=\"xl\">{props.name}</Heading>\r\n                <Text fontSize=\"md\">{props.description}</Text>\r\n            </Flex>\r\n            <Flex w=\"85%\" h=\"80%\" justify=\"center\" align=\"center\" direction=\"column\" borderRadius=\"50px\">\r\n                <Box margin=\"20px\" w=\"calc(100% - 40px)\" h=\"calc(100% - 40px)\" borderRadius=\"50px\"\r\n                     overflow=\"hidden\" boxShadow={\"0 0 2px 4px \" + mainColors.borderColor}\r\n                     bg={mainColors.backgroundColor}>\r\n                    <NodeModule disableControlPanel={true} nodes={props.nodeModels} links={props.linkModels}\r\n                                key={props.name}/>\r\n                </Box>\r\n            </Flex>\r\n            <Box width=\"80%\" h=\"3.5%\"/>\r\n        </VStack>\r\n    );\r\n};\r\n\r\n\r\nexport default Example;","import {Box, Link} from '@chakra-ui/react';\r\nimport React from 'react';\r\nimport {Link as RouterLink, Route, Switch, useRouteMatch} from \"react-router-dom\";\r\nimport Example from \"../examples/Example\";\r\nimport {CreateImageInputNode} from \"../node-module/nodes/ImageInputNode\";\r\nimport {NodeFactory} from \"../node-module/nodes/utils/NodeFactory\";\r\n\r\n\r\ninterface ExamplesMainPageProps {\r\n\r\n}\r\n\r\nconst ExamplesPage = (props: any) => {\r\n    let {path, url} = useRouteMatch();\r\n    let test = NodeFactory(\"Cap brightness\").createNewNode(1, 1, 1);\r\n    let testSave = NodeFactory(\"Cap brightness\").createNodeSave(test);\r\n    console.log(JSON.stringify(testSave));\r\n    let testLoaded = NodeFactory(\"Cap brightness\").loadNode(1, testSave);\r\n    console.log(test);\r\n    console.log(testLoaded);\r\n\r\n    return (\r\n        <Box position=\"absolute\" top={0} left={0} width=\"inherit\" height=\"inherit\">\r\n\r\n            <Box position=\"absolute\" top={0} left={\"0\"} width=\"150px\" height=\"inherit\" bg=\"#008800\">\r\n                <Link as={RouterLink} to={`${url}`}>\r\n                    /\r\n                </Link>\r\n                <br/>\r\n                <Link as={RouterLink} to={`${url}/ex1`}>\r\n                    ex1\r\n                </Link>\r\n            </Box>\r\n\r\n            <Box position=\"absolute\" top={0} left=\"150px\" width=\"calc(100% - 150px);\" height=\"inherit\" bg=\"#666666\">\r\n                <Switch>\r\n                    <Route exact path={`${path}/`}>\r\n                        <Example nodeModels={[]} linkModels={[]} name=\"empty\"\r\n                                 description=\"short description but with a lot of sense\"/>\r\n                    </Route>\r\n\r\n                    <Route exact path={`${path}/ex1`}>\r\n                        <Example nodeModels={[CreateImageInputNode(1)]} linkModels={[]} name=\"ex1\"\r\n                                 description=\"long description with a lot of sens and probably not a lot of anything else becouse I'm writing very\r\n                             much whatever only to test if this thin works correctly \"/>\r\n                    </Route>\r\n                </Switch>\r\n            </Box>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default ExamplesPage;","import {Box} from '@chakra-ui/react';\r\nimport React from 'react';\r\n\r\nconst MainPage = () => {\r\n\r\n    const onTouchTest = (event: any) => {\r\n        if (event.touches.length === 1) {\r\n            let startX = event.touches[0].screenX;\r\n            let startY = event.touches[0].screenY;\r\n\r\n\r\n        }\r\n        let startX = event.touch\r\n        const onMove = (event: any) => {\r\n\r\n        }\r\n        console.log(event.touches[0].screenX);\r\n        console.log(event.screenY);\r\n        console.log(event.touches.length);\r\n    }\r\n\r\n    return (\r\n        <Box onTouchStart={onTouchTest} width=\"100vw\" height=\"100vh\">\r\n            Main page\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default MainPage;","import React from 'react';\r\nimport './App.css';\r\nimport NodeModule from \"./node-module/NodeModule\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport {CreateImageInputNode} from \"./node-module/nodes/ImageInputNode\";\r\nimport {CreateOutputNode} from \"./node-module/nodes/OutputNode\";\r\nimport {NodeModel} from \"./node-module/node-atomic/NodeModel\";\r\nimport {CreateClampImageNode} from \"./node-module/nodes/CapBrightnessNode\";\r\nimport {CreateContrastNode} from \"./node-module/nodes/ContrastNode\";\r\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\r\nimport {ChakraProvider, extendTheme} from \"@chakra-ui/react\";\r\nimport ExamplesPage from \"./pages/ExamplesPage\";\r\nimport MainPage from \"./pages/MainPage\";\r\n\r\nexport const mainColors = {\r\n    backgroundColor: \"#54606d\",\r\n    headerColor: \"#299b91\",\r\n    borderColor: \"#334447\",\r\n    segmentColor: \"#3c454f\",\r\n    color: \"#f7f7f7\",\r\n}\r\n\r\nconst testNodes: NodeModel[] = [\r\n    CreateImageInputNode(1, -360, -60),\r\n    CreateOutputNode(2, 220, 80),\r\n    CreateClampImageNode(3, 0, 0),\r\n    CreateContrastNode(4, 100, 0)\r\n]\r\n\r\nconst theme = extendTheme({\r\n    styles: {\r\n        global: {\r\n            \"html, body\": {\r\n                bg: \"#54606d\",\r\n                fontFamily: \"Ubuntu\",\r\n                fontWeight: 300\r\n            },\r\n            \"*, *::before, &after\": {\r\n                boxSizing: \"content-box\"\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nfunction App() {\r\n    return (\r\n        <ChakraProvider theme={theme}>\r\n            <Router>\r\n                <div style={{\r\n                    position: \"absolute\", top: 0, height: \"7vh\",\r\n                    width: \"100vw\", margin: 0, padding: 0\r\n                }}>\r\n                    <Navbar/>\r\n                </div>\r\n\r\n                <Switch>\r\n                    <Route exact path={\"/\"}>\r\n                        <MainPage/>\r\n                    </Route>\r\n\r\n                    <Route path={\"/editor\"}>\r\n                        <div style={{\r\n                            position: \"absolute\", margin: 0, marginTop: \"7vh\", height: \"93vh\",\r\n                            width: \"100vw\", padding: 0\r\n                        }}>\r\n                            <NodeModule nodes={testNodes}/>\r\n                        </div>\r\n                    </Route>\r\n\r\n                    <Route path={\"/examples\"}>\r\n                        <div style={{\r\n                            position: \"absolute\", margin: 0, marginTop: \"7vh\", height: \"93vh\",\r\n                            width: \"100vw\", padding: 0\r\n                        }}>\r\n                            <ExamplesPage/>\r\n                        </div>\r\n                    </Route>\r\n                </Switch>\r\n            </Router>\r\n        </ChakraProvider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {ReportHandler} from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}